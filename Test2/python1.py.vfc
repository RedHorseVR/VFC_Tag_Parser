 set();//  # set
 set();//  # set
 event(import argparse);//  # event# event
 event(import os);//  # event# event
 event(import re);//  # event# event
 event(import sys);//  # event# event
 input(def phase2_map_tags(lines, comment_marker, lang):);//  # input
 set();//  #    """
 # set --
 set();//  #    Process lines marked with a generic tag. # set --
 set();//  #    For header lines: # set --
 set();//  #      - If a line contains "tag-header", remove that marker and call lang.tagMapper() with isIndent=True # set --
 set();//  #        on the header's content. Replace the marker with the refined tag and push the expected closure (via lang.closureMapping) # set --
 set();//  #        onto a local stack. # set --
 set();//  #      - For the following line marked "tag-brace", simply replace its marker with " path". # set --
 set();//  #      - For normal header lines (ending with "{ tag"), process similarly. # set --
 set();//  #    For closing lines (lines starting with "}" with " tag"), call lang.tagMapper() with isIndent=False to get the refined closing tag. # set --
 set();//  #    """ # set --
 set(new_lines = []);//  # set
 set(stack = []);//  # local stack for expected closures# set
 set(line_num = 0);//  # set
 input(def remove_marker(line, marker):);//  # input
 end(return re.sub(r"\s*" + re.escape(comment_marker) + r"\s*" + re.escape(marker), "", line));//  # end
 end();//  # end
 loop(for line in lines:);//  # loop
 set(line_num += 1);//  # set
 branch(if comment_marker + " tag-header" in line:);//  # branch
 set(header_line = line);//  # set
 set(cleaned = remove_marker(header_line, "tag-header").rstrip());//  # set
 set(refined = lang.tagMapper(cleaned, True, line_num));//  # set
 set(new_header = re.sub(r"\s*" + re.escape(comment_marker) + r"\s*tag-header", " " + comment_marker + " " + refined, header_line));//  # set
 set(new_lines.append(new_header));//  # set
 set(expected = lang.closureMapping.get(refined, refined));//  # set
 set(stack.append(expected));//  # set
 output(continue);//  # output
 bend();//  # bend
 branch(if comment_marker + " tag-brace" in line:);//  # branch
 set(new_brace = re.sub(r"\s*" + re.escape(comment_marker) + r"\s*tag-brace", " " + comment_marker + " path", line));//  # set
 set(new_lines.append(new_brace));//  # set
 output(continue);//  # output
 bend();//  # bend
 branch(if comment_marker + " tag" in line:);//  # branch
 set(stripped = line.strip());//  # set
 branch(if stripped.endswith("{ " + comment_marker + " tag"):);//  # branch
 set(header_line = line);//  # set
 set(cleaned = remove_marker(header_line, "tag").rstrip());//  # set
 branch(if cleaned.endswith("{"):);//  # branch
 set(header_content = cleaned[:-1].strip());//  # set
 set();//  # set
 path(else:);//  # path
 set(header_content = cleaned.strip());//  # set
 bend();//  # bend
 set(refined = lang.tagMapper(header_content, True, line_num));//  # set
 set(new_line = re.sub(r"\s*" + re.escape(comment_marker) + r"\s*tag", " " + comment_marker + " " + refined, line));//  # set
 set(new_lines.append(new_line));//  # set
 set(expected = lang.closureMapping.get(refined, refined));//  # set
 set(stack.append(expected));//  # set
 output(continue);//  # output
 bend();//  # bend
 branch(if stripped.startswith("}") and (comment_marker + " tag") in stripped:);//  # branch
 set(base_line = re.sub(r"\s*" + re.escape(comment_marker) + r"\s*tag", "", line).rstrip());//  # set
 set(refined = lang.tagMapper(base_line, False, line_num));//  # set
 set(new_line = base_line + " " + comment_marker + " " + refined);//  # set
 set(new_lines.append(new_line));//  # set
 output(continue);//  # output
 bend();//  # bend
 bend();//  # bend
 set(new_lines.append(line));//  # set
 lend();//  # lend
 end(return new_lines);//  # end
 end();//  # end
 input(def main():);//  # input
 set(parser.add_argument("language", help="Language (e.g., javascript, python, perl)"));//  # set
 set(parser.add_argument("file", help="Source file to tag"));//  # set
 set(args = parser.parse_args());//  # set
 set(lang = None);//  # set
 branch(try:);//  # branch
 set(lang = load_language_module(args.language.lower()));//  # set
 set();//  # set
 path(except Exception as e:);//  # path
 set(sys.exit("Error loading language module: " + str(e)));//  # set
 bend();//  # bend
 branch(try:);//  # branch
 branch(with open(args.file, "r", encoding="utf-8") as f:);//  # branch
 set(source = f.read());//  # set
 bend();//  # bend
 set();//  # set
 path(except Exception as e:);//  # path
 set(sys.exit(f"Error reading source file: {e}"));//  # set
 bend();//  # bend
 set(formatted = lang.pretty_print(source));//  # set
 set(formatted = convert_spaces_to_tabs(formatted, spaces_per_tab=4));//  # set
 set(lines = formatted.splitlines());//  # set
 set(lang.reset_tag_stack());//  # set
 set(phase1_lines = phase1_reindent(lines, lang.comment_marker));//  # set
 set(final_lines = phase2_map_tags(phase1_lines, lang.comment_marker, lang));//  # set
 set(output_file = os.path.basename(args.file) + ".txt");//  # set
 branch(try:);//  # branch
 branch(with open(output_file, "w", encoding="utf-8") as out:);//  # branch
 output(out.write(f"{lang.comment_marker} TAGGED FOR VFC\n"));//  # output
 output(out.write(f"{lang.comment_marker} TAGGED FOR VFC\n"));//  # output
 loop(for l in final_lines:);//  # loop
 output(out.write(l + "\n"));//  # output
 lend();//  # lend
 bend();//  # bend
 set();//  # set
 path(except Exception as e:);//  # path
 set(sys.exit(f"Error writing output file: {e}"));//  # set
 bend();//  # bend
 output(print(f"Output written to: {output_file}"));//  # output
 end();//  # end
 branch(if __name__ == "__main__":);//  # branch
 set(main());//  # set
 bend();//  # bend
 end();//  # end
