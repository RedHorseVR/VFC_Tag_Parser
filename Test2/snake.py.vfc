;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : snake.py.vfc
;  File Date : 02:44:54 PM - 03:Apr:2025

set();//  # set
set();//  # set
event(import pygame);//  # event
event(import random);//  # event
event(import time);//  # event
set(pygame.init());//  # set
set(BLACK = (0, 0, 0));//  # set
set(WHITE = (255, 255, 255));//  # set
set(GREEN = (0, 255, 0));//  # set
set(RED = (255, 0, 0));//  # set
set(WIDTH, HEIGHT = 600, 400);//  # set
set(BLOCK_SIZE = 20);//  # set
set(screen = pygame.display.set_mode((WIDTH, HEIGHT)));//  # set
set(pygame.display.set_caption('Snake Game'));//  # set
set(clock = pygame.time.Clock());//  # set

input(class Snake:);//  # input
branch();//  # branch
path();//  # path
path();//  # path

input(def __init__(self):);//  # input
set(self.positions = [(WIDTH // 2, HEIGHT // 2)]);//  # set
set(self.direction = 'RIGHT');//  # set
set(self.length = 1);//  # set
set(self.score = 0);//  # set
end();//  # set  # end

input(def move(self):);//  # input
set(head_x, head_y = self.positions[0]);//  # set
branch(if self.direction == 'UP':);//  # branch
path();//  # path
set(new_head = (head_x, head_y - BLOCK_SIZE));//  # set
set();//  # set
path(elif self.direction == 'DOWN':);//  # path
set(new_head = (head_x, head_y + BLOCK_SIZE));//  # set
set();//  # set
path(elif self.direction == 'LEFT':);//  # path
set(new_head = (head_x - BLOCK_SIZE, head_y));//  # set
set();//  # set
path(elif self.direction == 'RIGHT':);//  # path
set(new_head = (head_x + BLOCK_SIZE, head_y));//  # set
bend();//  # set  # bend
set(self.positions.insert(0, new_head));//  # set
branch(if len(self.positions) > self.length:);//  # branch
path();//  # path
set(self.positions.pop());//  # set
bend();//  # set  # bend
end();//  # set  # end

input(def change_direction(self, new_direction):);//  # input
branch(if (new_direction == 'UP' and self.direction != 'DOWN') or (new_direction == 'DOWN' and self.direction != 'UP') or (new_direction == 'LEFT' and self.direction != 'RIGHT') or (new_direction == 'RIGHT' );//  # branch
path();//  # path
set(self.direction = new_direction);//  # set
bend();//  # set  # bend
end();//  # set  # end

input(def check_collision(self):);//  # input
set(head_x, head_y = self.positions[0]);//  # set
branch(if head_x < 0 or head_x >= WIDTH or head_y < 0 or head_y >= HEIGHT:);//  # branch
path();//  # path
end(return True);//  # end
bend();//  # set  # bend
loop(for pos in self.positions[1:]:);//  # loop
branch(if pos == self.positions[0]:);//  # branch
path();//  # path
end(return True);//  # end
bend();//  # set  # bend
lend();//  # set  # lend
end(return False);//  # end
end();//  # set  # end

input(def grow(self):);//  # input
set(self.length += 1);//  # set
set(self.score += 10);//  # set
end();//  # set  # end

input(def draw(self, surface):);//  # input
loop(for i, (x, y) in enumerate(self.positions):);//  # loop
set(color = GREEN if i == 0 else (0, 200, 0));//  # set
set(pygame.draw.rect(surface, color, (x, y, BLOCK_SIZE, BLOCK_SIZE)));//  # set
set(pygame.draw.rect(surface, (0, 100, 0), (x, y, BLOCK_SIZE, BLOCK_SIZE), 1));//  # set
lend();//  # set  # lend
end();//  # set  # end
bend();//  # set  # bend

input(class Food:);//  # input
branch();//  # branch
path();//  # path
path();//  # path

input(def __init__(self):);//  # input
set(self.position = self.generate_position());//  # set
end();//  # set  # end

input(def generate_position(self):);//  # input
set(x = random.randint(0, (WIDTH - BLOCK_SIZE) // BLOCK_SIZE) * BLOCK_SIZE);//  # set
set(y = random.randint(0, (HEIGHT - BLOCK_SIZE) // BLOCK_SIZE) * BLOCK_SIZE);//  # set
end(return (x, y));//  # end
end();//  # set  # end

input(def draw(self, surface):);//  # input
set(pygame.draw.rect(surface, RED, (self.position[0], self.position[1], BLOCK_SIZE, BLOCK_SIZE)));//  # set
end();//  # set  # end

input(def respawn(self, snake_positions):);//  # input
loop(while True:);//  # loop
set(new_pos = self.generate_position());//  # set
branch(if new_pos not in snake_positions:);//  # branch
path();//  # path
set(self.position = new_pos);//  # set
set(break);//  # set
bend();//  # set  # bend
lend();//  # set  # lend
end();//  # set  # end
bend();//  # set  # bend

input(def draw_score(surface, score):);//  # input
set(font = pygame.font.SysFont('Arial', 25));//  # set
set(score_text = font.render(f'Score: {score}', True, WHITE));//  # set
set(surface.blit(score_text, (10, 10)));//  # set
end();//  # set  # end

input(def game_over_screen(surface, score):);//  # input
set(surface.fill(BLACK));//  # set
set(font_large = pygame.font.SysFont('Arial', 50));//  # set
set(font_small = pygame.font.SysFont('Arial', 30));//  # set
set(game_over_text = font_large.render('Game Over!', True, RED));//  # set
set(score_text = font_small.render(f'Your Score: {score}', True, WHITE));//  # set
set(restart_text = font_small.render('Press R to Restart or Q to Quit', True, WHITE));//  # set
set(surface.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, HEIGHT // 2 - game_over_text.get_height() // 2 - 50)));//  # set
set(surface.blit(score_text, (WIDTH // 2 - score_text.get_width() // 2, HEIGHT // 2 - score_text.get_height() // 2)));//  # set
set(surface.blit(restart_text, (WIDTH // 2 - restart_text.get_width() // 2, HEIGHT // 2 - restart_text.get_height() // 2 + 50)));//  # set
set(pygame.display.update());//  # set
end();//  # set  # end

input(def main():);//  # input
set(running = True);//  # set
set(game_active = True);//  # set
set(snake = Snake());//  # set
set(food = Food());//  # set
set(fps = 10);//  # set
loop(while running:);//  # loop
loop(for event in pygame.event.get():);//  # loop
branch(if event.type == pygame.QUIT:);//  # branch
path();//  # path
set(running = False);//  # set
bend();//  # set  # bend
branch(if event.type == pygame.KEYDOWN:);//  # branch
path();//  # path
branch(if game_active:);//  # branch
path();//  # path
branch(if event.key == pygame.K_UP:);//  # branch
path();//  # path
set(snake.change_direction('UP'));//  # set
set();//  # set
path(elif event.key == pygame.K_DOWN:);//  # path
set(snake.change_direction('DOWN'));//  # set
set();//  # set
path(elif event.key == pygame.K_LEFT:);//  # path
set(snake.change_direction('LEFT'));//  # set
set();//  # set
path(elif event.key == pygame.K_RIGHT:);//  # path
set(snake.change_direction('RIGHT'));//  # set
bend();//  # set  # bend
set();//  # set
path(else:);//  # path
branch(if event.key == pygame.K_r:);//  # branch
path();//  # path
set(snake = Snake());//  # set
set(food = Food());//  # set
set(game_active = True);//  # set
set();//  # set
path(elif event.key == pygame.K_q:);//  # path
set(running = False);//  # set
bend();//  # set  # bend
bend();//  # set  # bend
bend();//  # set  # bend
lend();//  # set  # lend
branch(if game_active:);//  # branch
path();//  # path
set(snake.move());//  # set
branch(if snake.check_collision():);//  # branch
path();//  # path
set(game_active = False);//  # set
bend();//  # set  # bend
branch(if snake.positions[0] == food.position:);//  # branch
path();//  # path
set(snake.grow());//  # set
set(food.respawn(snake.positions));//  # set
branch(if snake.score % 50 == 0:);//  # branch
path();//  # path
set(fps += 1);//  # set
bend();//  # set  # bend
bend();//  # set  # bend
set(screen.fill(BLACK));//  # set
set(snake.draw(screen));//  # set
set(food.draw(screen));//  # set
set(draw_score(screen, snake.score));//  # set
set(pygame.display.update());//  # set
set();//  # set
path(else:);//  # path
set(game_over_screen(screen, snake.score));//  # set
bend();//  # set  # bend
set(clock.tick(fps));//  # set
lend();//  # set  # lend
set(pygame.quit());//  # set
end();//  # set  # end
branch(if __name__ == "__main__":);//  # branch
path();//  # path
set(main());//  # set
bend();//  # bend
end();//  # end



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 13158600 0 255 255 9895835 16777088 11520
;    snake.py   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 4294965158 4294966199 1426 3314 59 109   4294967111   4294967122    python.key  0