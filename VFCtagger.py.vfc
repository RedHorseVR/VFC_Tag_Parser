;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : VFCtagger.py.vfc
;  File Date : 12:42:37 PM - 22:Mar:2025

event(import argparse);//
event(import os);//
event(import re);//
event(import sys);//
event(import importlib);//
set(from typing import List, Dict, Any, Optional);//
process(  );//   import postProcess 
process(  );//   Constants for tag types 
process( TAG_OPEN = "tagA");//
process( TAG_CLOSE = "tagB");//
process( TAG_BRIDGE = "tagX");//
end();//
event();//@staticmethod

input( class VFCTagger:);////    //
branch();////   <-- inserted by postProcess.py//
path();//

input( def __init__(self, language_module):);//    
set(self.lang = language_module);//
end(  );//    

input(def convert_spaces_to_tabs(self, text: str, spaces_per_tab: int = 4) -> str:);//
set(text = re.sub(f"( {{{spaces_per_tab}}})", "\t", text));//
process(  );//   Then remove empty lines 
end(return re.sub(r"(?m)^[\n]+", "", text));//

input(def process_file(self, source_file: str, skip_mapping: bool = False) -> str:);//
process(  );//   """Process a source file and add structure tags.""" 
branch( try:);//    
path();//
branch( with open(source_file, "r", encoding="utf-8") as f:);//    
path();//
set(source = f.read());//
bend(  );//    
set();//
path( except Exception as e:);//    
set(raise IOError(f"Error reading source file: {e}"));//
bend(  );//    
process(  );//   Format the source code consistently for both modes 
set(formatted = self.lang.pretty_print(source));//
set(formatted = self.convert_spaces_to_tabs(formatted));//
process(  );//   Process the source with the same tagging rules for both modes 
set(lines = formatted.splitlines());//
set(tagged_lines = self.insert_indentation_tags(lines));//
process(  );//   Only map tags if not in skip mode 
branch( if not skip_mapping:);//    
path();//
set(tagged_lines = self.map_language_tags(tagged_lines));//
bend(  );//    
end(return "\n".join(tagged_lines));//
end(  );//    

input( def map_language_tags(self, lines: List[str]) -> List[str]:);////   tag-----<<< //
set(new_lines = []);//
set(tags = [TAG_OPEN, TAG_CLOSE, TAG_BRIDGE]);//
loop( for i, line in enumerate(lines):);//    
set(mapped = False);//
loop( for tag in tags:);//    
set(tag_marker = f"{self.lang.comment_marker} {tag}");//tag_marker = f"{tag}"
branch( if tag_marker in line:);//    
path();//
set(cleaned = line.replace(tag_marker, "").strip());//
set(refined = self.lang.tagMapper(cleaned, tag, i + 1));//
set(new_line = line.replace(tag_marker, f"{self.lang.comment_marker} {refined}"));//
set(indent_level = len(line) - len(line.lstrip("\t")));//
set(tab = "\t");//
branch( if tag == TAG_CLOSE and self.lang.language == "python" :);// #<-------------------------lang dependent fix !!!!
path();//
set(new_lines.append(f"{ tab *indent_level }{self.lang.comment_marker} {refined}"));//
set(new_lines.append(f"{ tab *indent_level }{cleaned}"));//
path( else:);//    
set(new_lines.append(new_line));//
bend(  );//    
set(mapped = True);//
end(break);//
bend(  );//    
set();//
set();//
lend(  );//    
branch( if not mapped:);//    
path();//
set(new_lines.append(line));//
bend(  );//    
lend(  );//    
end(return new_lines);//
end();//   <-- inserted by postProcess.py
set();//
path();//

input(def count_tabs(self, line):);// ////
branch(#try-catch-exception);//
path(try:);//
generic(match = re.match(r'^(\t*)', line));// ////
end(return len(match.group(1)));// ////
path(except :);//
end(return 0);//
bend( );//
process(  );//   tag 

input(def insert_indentation_tags(self, lines: List[str]) -> List[str]:);//
process(  );//   """ 
process(  );//   Add tags based on strict indentation rules: 
process(  );//   - TAG_OPEN (tagA): Added to line before +1 indent 
process(  );//   - TAG_CLOSE (tagB): Added to line after -1 indent 
process(  );//   - TAG_BRIDGE (tagX): Added when a line is both an entry and exit point 
process(  );//   - Enforce indentation "speed limit" of +1, 0, -1 per line 
process(  );//   """ 
set(new_lines = []);//
set(prev_indent = 0);//
set(InsideMultiLineComment = False);//
loop( for i, line in enumerate(lines):);//    
set(stripped = line.lstrip());//
branch( if not stripped:);////   Skip empty lines # branch //
path();//
set(new_lines.append(line));//
end(continue);//
bend(  );//    
set(indent_level = self.count_tabs(line));//indent_level = len(line) - len(stripped)
process(  );//   skip the multi line comments 
branch(if stripped.startswith(self.lang.multiline_comment_start) and not InsideMultiLineComment:);//////
path();//
set(  );////   ( f"break {i} on start : {stripped}" ) //
set(InsideMultiLineComment = True);//
path( else:);//    
branch(if stripped.endswith(self.lang.multiline_comment_end):);//////
path();//
set(  );////   ( f"break {i} on end : {stripped}" ) //
set(InsideMultiLineComment = False);//
bend();//
bend();//
set();//
process(  );//   tag 
process(  );//   Skip comment-only lines 
process(  );//   if stripped.startswith(self.lang.comment_marker) or InsideMultiLineComment or stripped.startswith(self.lang.multiline_comment_end): 
branch( if InsideMultiLineComment or stripped.startswith(self.lang.multiline_comment_end):);//    
path();//
set(new_lines.append(line.rstrip()));//
end(continue);//
bend(  );//    
process(  );//   Get next indentation level 
output(print( i , len(lines) ));//
set(next_indent = 0);//
set(indent_level = thisLevel = self.count_tabs( line ));//
set(prev_indent = prevLevel = 0  if i == 0 else self.count_tabs( lines[ i-1] ));//
set(next_indent = nextLevel = 0 if i >= len(lines)-1 else  self.count_tabs( lines[ i+1] ));//
set();//next_indent =nextLevel
process(  );//   Handle multi-level indentation changes (enforce speed limit) 
branch(if indent_level > prev_indent + 1:);//////
path();//
process(  );//   Insert bridge lines for jumps >1 level 
loop( for bridge_level in range(prev_indent + 1, indent_level):);//    
set(new_lines.append("\t" * bridge_level + f"{self.lang.comment_marker} {TAG_BRIDGE}"));//
lend(  );//    
bend();//////
process(  );//   tag 
process(  );//   Handle multi-level indentation decreases 
branch(if prev_indent > indent_level + 1:);//////
path();//
process(  );//   Process decrease in steps 
loop( for step in range(prev_indent - 1, indent_level, -1):);//    
set(new_lines.append("\t" * step + f"{self.lang.comment_marker} {TAG_CLOSE}"));//
lend(  );//    
bend();//////
process(  );//   tag 
process(  );//   Insert blank line when going from level 1 to 0 if next line would indent 
branch( if prev_indent == 1 and indent_level == 0 and next_indent > 0:);//    
path();//
set(new_lines.append(f"{self.lang.comment_marker} {TAG_CLOSE}"));//
bend(  );//    
process(  );//   Apply tags based on precise indentation patterns 
branch(if indent_level < prev_indent and indent_level < next_indent:);//////
path();//
process(  );//   Line is both an exit and entry point - use TAG_BRIDGE (tagX) 
process( new_lines.append(line.rstrip() + f" {self.lang.comment_marker} {TAG_BRIDGE} "));//   |+++++++++++++ BRIDGE ")# 
process(  );//   tag 
path(elif indent_level < next_indent:);//////
process(  );//   Line before +1 indent gets TAG_OPEN (tagA) 
process( new_lines.append(line.rstrip() + f" {self.lang.comment_marker} {TAG_OPEN} "));//   |+++++++++++++ OPEN ") 
process(  );//   tag 
path(elif indent_level < prev_indent:);//////
process(  );//   Line after -1 indent gets TAG_CLOSE (tagB) 
process(  new_lines.append(line.rstrip() + f" {self.lang.comment_marker} {TAG_CLOSE} "));// new_lines.append(  line.rstrip()+'XXX' )
process(  );//   tag 
path(else:);//////
process(  );//   No indentation change 
set(new_lines.append(line.rstrip()));//
process(  );//   tag 
bend();//
set(prev_indent = indent_level);//
process(  );//   tag 
lend();//
end(return new_lines);//
bend();//
end();//

input( def get_main_args():);//    
set(parser = argparse.ArgumentParser(description="Indentation Validator and Marker"));//
set(parser.add_argument("language", help="Language (e.g., javascript, python, perl)"));//
set(parser.add_argument("file", help="Source file to process"));//
set(parser.add_argument("--skip", action="store_true", help="Skip language processing and only perform indentation tagging"));//
set(parser.add_argument("--output", help="Output file (default: {input}_indented.txt)"));//
set(args = parser.parse_args());//
end(return args);//
set(lang_commentmarker = '#');// 
set(path_types = [ 'else', 'except', 'catch', 'case' ]);//

input(def  lang_filter( line  ):);//
set(branch_types = [ 'if', 'with', 'try', 'switch'  ]);//
set(loop_types = [ 'for ', 'while ', 'do ', 'until '  ]);//
set(input_types = [ 'function', 'def', 'async', 'module'  ]);//
set(event_types = [ 'from', 'include', 'import', 'use'  ]);//
branch(if any(word in line for word in path_types )  :);//if line.strip() in path_types  :
path( );//
output();//print( '----------------> ' , line.strip() )
set(newline  =  '\t' + line + f'{ lang_commentmarker } path ');//
path(elif   any(line.lstrip().startswith(word) for word in branch_types  )   :);// elif any(word in line for word in branch_types )  :
generic(push( 'bend' ));// 
set(newline  =  line + f'{ lang_commentmarker } branch  ');//
set(newline  +=  '\n' + f'{ lang_commentmarker } path  ');//<--- add then path as default
path(elif   any(line.lstrip().startswith(word) for word in loop_types  ) :);// 
process(push( 'lend' ));//
set(newline  =  line + f'{ lang_commentmarker } loop ');//
path(elif   any(line.lstrip().startswith(word) for word in input_types  ) :);// 
process(push( 'end' ));//
set(newline  =  line + f'{ lang_commentmarker } input ');//
path(elif   any(line.lstrip().startswith(word) for word in event_types  ) :);// 
set(newline  =  line + f'{ lang_commentmarker } event ');//
path(else: );//
set();//newline  =   line
set(newline  =  line + f'{ lang_commentmarker } set ');//
bend( );//
end(return newline);//
set(stack = []);//

input(def  pop( ):);//
generic(global stack);// ////
branch(if len( stack) >0  :);//
path( );//
generic(item = stack.pop());// 
output();//print( '\t'*8 +'...POP' , item , stack )
end(return item);//
path(else: );//
output(print( '--------------------empty stack----------------------------'));//
end(return "");// 
bend( );//
end();//

input(def  push(  item ):);//
generic(global stack);// ////
generic(stack.append( item ));// 
output();//print( '\t'*8 +'...PUSH' , item , stack )
end();//

input(def  lang_check_path( line ):);//
branch(if any(word in line for word in path_types )  :);//if line.strip() in path_types  :
path( );//
set(newline  =  '\t' + line);//
path(else: );//
set(newline  =   line);//
bend( );//
end(return newline);//

input(def  process_tabbed_file( tabfile ):);//
set(TABS =0);//
set(last_TAB = 0);//
output(print(  f'{ lang_commentmarker } set '  ));//////
output(print(  f'{ lang_commentmarker } set '  ));//////
loop(for i in range ( 0 , len(tabfile) - 2 )  :);//for line  in tabfile :
set(line = tabfile[ i ]);//
process(line = lang_filter( line ));//
set(last_TAB = TABS);//
set(TABS = len( line ) - len( line.lstrip('\t') ));//
process(nextline = lang_check_path( tabfile[i+1] ));//
set(next_TABS = len( nextline  ) - len( nextline.lstrip('\t') ));//
set(tabrate = last_TAB-TABS);//
set(next_tabrate = TABS - next_TABS);//
branch(if   next_tabrate == 1  :);//
path();//
output(print(  f'\t' * (TABS) + f'{ lang_commentmarker } { pop() } -----'  ));//
output();//print(  f'{TABS-1} {line}'  )
path(else: );//
output(print(  f'{line}'  ));//pass
bend( );//
branch(if   next_tabrate == 2  :);//
path();//
output(print(  f'\t' * (TABS) + f'{ lang_commentmarker } { pop() } -----'  ));//
output();//print(  f'{TABS-1} {line}'  )
bend( );//
lend( );//
set();//line = tabfile[ len(tabfile) - 1 ]
output();//print(  f'{TABS} {last_TAB} { last_TAB-TABS } {line}'  )
output(print( '------------------------------------------------') );//
end(   );//

input(def proc_file(filename):);// 
set(filename = filename.strip());//
output(print( '------------------------------------------------') );//
output(print( filename ));//
set(tabbed_file = []);//
branch(try:  );// // branch //
path();//
generic(LINE = ' ');// ////
set(TABS =0);//
branch(with open(filename, 'r') as file:  );// // branch //
path();//
set(IN_COMMENT_BLOCK = False;);//
set(i = 0 );//
set(last_TAB = 0);//
loop(for line in file:  );// // loop //
generic(linet = line.replace('    ', '\t').strip( "\n" ));//
generic(LINE2 = line.replace('    ', '\t').strip( "\n" ));//
branch(if  not linet.strip() == ''    :);//
path();//
branch(if  not IN_COMMENT_BLOCK and not line.startswith('\n')  and not line.lstrip().startswith('#') :);//
path( );//
set(i +=1 );//
generic(IN_COMMENT_BLOCK = line.strip().startswith( '"""'  ));//
branch(if IN_COMMENT_BLOCK   :);//
path( );//
output(pass);//print( f'{ "##" }  { linet  }'  )
set();//tabbed_file.append( '###' + LINE2  )
path(else: );//
set(last_TAB = TABS);//
set(TABS = len( linet ) - len( linet.lstrip('\t') ));//
generic(LINE2 = line.replace('    ', '\t').strip( "\n" ));//LINE2 = line.replace('    ', '\t.').strip( "\n" )
process();//LINE2 = lang_filter( LINE2 )
generic(LINE = line.replace('    ', '\t.').strip( "\n" ));//
process();//LINE = lang_filter( LINE )
generic(diff = TABS - last_TAB);// 
branch(if  diff < 0   :);// 
path();//
loop(for tabs in range(  last_TAB , TABS , -1 ) :);//
generic(FillLINE = '\t.' * tabs);// FillLINE = '\t.' * (last_TAB-1)
generic(FillLINE2 = '\t' * tabs);//FillLINE2 = '\t.' * tabs
output( );//print( f'{ tabs }---->  { FillLINE }' )
set(tabbed_file.append( FillLINE2  ));//
lend( );//
bend( );//
output();//print( f'{ TABS } : { diff }   { LINE  }' )
set(tabbed_file.append( LINE2  ));//
bend( );//
path(else: );//
branch(if line.strip().endswith( '"""'  )  :);//
path( );//
set(IN_COMMENT_BLOCK = False;);//
bend( );//
output( );//print( f'{ "##"  }  { linet }' )
set();//tabbed_file.append( '###' + LINE2  )
bend( );//
path(else: );//
output(print( '------------------------------------------------') );//
bend( );//
lend();// // lend //
bend();// // bend //
path(except FileNotFoundError:  );//
output(print(f"The file '{filename}' was not found."));//
path(except Exception as e:  );//// // branch ////
output(print(f"An error occurred: {e}"));//// // General error handling ////
bend();// // bend //
end(return tabbed_file);//
end();//

input(def import_language( LANGUAGE ):);//
branch( try:);//    
path();//
set(FORMATTER  = importlib.import_module(f"languages.{  LANGUAGE  }_lang"));//
path( except ImportError as e:);//    
output(sys.exit(f"Error loading FORMATTER module: {e}"));//////
bend(  );//    
end(return FORMATTER);//

input( def main():);//    
process(    );//args =  get_main_args() ;
generic(LANGUAGE = "python");//LANGUAGE = args.language.lower( )
event(FORMATTER = import_language( LANGUAGE  ));//
generic(CODEFILE = "TEST2\python1.py");//LANGUAGE = args.language.lower( )
output(tabfile = proc_file( CODEFILE ));//
process(tabbed = process_tabbed_file( tabfile ) ;);//
output();//print_file( FORMATTER.pretty_print( CODEFILE ) )
output(print( '----------DONE----------') );//
end(exit);//////////
set(''' -------------------------------------------- );//
set(tagger = VFCTagger( FORMATTER ));//
set(result = tagger.process_file(args.file, args.skip));//
set(output_file = args.output if args.output else os.path.basename(args.file) + ".tag");//
branch( with open(output_file, "w", encoding="utf-8") as out:);//    
path();//
set(out.write(result));//
bend(  );//    
output(print(f"Output written to: {output_file}"));//
set(-------------------------------------------- ''');//
end(  );//   endif---------------- # tag-----<<< 
branch(if __name__ == "__main__":);//////
path();//
set(main());//
bend();//
end();//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 16744703 0 255 255 65535 6946660 0
;    VFCtagger.py   #   .
; notepad++.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 449 38 1854 1999 211 148   894   4294962447    python.key  0