True
False
set();
set(const WIDTH = 800;);
set(const HEIGHT = 600;);
set(const PADDLE_WIDTH = 20;);
set(const PADDLE_HEIGHT = 100;);
set(const BALL_SIZE = 15;);
set(const PADDLE_SPEED = 8;);
set(const INITIAL_BALL_SPEED = 7;);
set();
set();
input(function Paddle(x, y, width, height) {);
set(this.x = x;);
set(this.y = y;);
set(this.width = width;);
set(this.height = height;);
set(this.speed = PADDLE_SPEED;);
end(});
set();
branch(Paddle.prototype.draw = function (ctx) {);
set(ctx.fillStyle = "white";);
set(ctx.fillRect(this.x, this.y, this.width, this.height););
bend(};);
set();
branch(Paddle.prototype.moveUp = function () {);
branch(if (this.y > 0) {);
set(this.y -= this.speed;);
bend(});
bend(};);
set();
branch(Paddle.prototype.moveDown = function () {);
branch(if (this.y + this.height < HEIGHT) {);
set(this.y += this.speed;);
bend(});
bend(};);
set();
set();
input(function Ball(x, y, size) {);
set(this.x = x;);
set(this.y = y;);
set(this.width = size;);
set(this.height = size;);
set(this.speedX = 0;);
set(this.speedY = 0;);
set(this.resetSpeed(););
end(});
set();
input(Ball.prototype.draw = function (ctx) {);
set(ctx.fillStyle = "white";);
set(ctx.beginPath(););
branch(ctx.arc();
set(this.x + this.width / 2,);
set(this.y + this.height / 2,);
set(this.width / 2,);
set(0,);
set(Math.PI * 2,);
bend(););
set(ctx.fill(););
end(};);
set();
branch(Ball.prototype.update = function () {);
set(this.x += this.speedX;);
set(this.y += this.speedY;);
set();
set();
branch(if (this.y <= 0 || this.y + this.height >= HEIGHT) {);
set(this.speedY *= -1;);
bend(});
bend(};);
set();
branch(Ball.prototype.reset = function () {);
set(this.x = WIDTH / 2 - this.width / 2;);
set(this.y = HEIGHT / 2 - this.height / 2;);
set(this.resetSpeed(););
bend(};);
set();
branch(Ball.prototype.resetSpeed = function () {);
set(this.speedX = INITIAL_BALL_SPEED * (Math.random() > 0.5 ? 1 : -1););
set(this.speedY = INITIAL_BALL_SPEED * (Math.random() > 0.5 ? 1 : -1););
bend(};);
set();
branch(Ball.prototype.collidesWith = function (paddle) {);
branch(return ();
set(this.x < paddle.x + paddle.width &&);
set(this.x + this.width > paddle.x &&);
set(this.y < paddle.y + paddle.height &&);
set(this.y + this.height > paddle.y);
bend(););
bend(};);
set();
set();
input(function Game() {);
set(this.canvas = document.getElementById("gameCanvas"););
set(this.ctx = this.canvas.getContext("2d"););
set();
set(this.player1Score = 0;);
set(this.player2Score = 0;);
set(this.keys = {};);
set();
set();
branch(this.player1 = new Paddle();
set(50,);
set(HEIGHT / 2 - PADDLE_HEIGHT / 2,);
set(PADDLE_WIDTH,);
set(PADDLE_HEIGHT,);
bend(););
set();
branch(this.player2 = new Paddle();
set(WIDTH - 50 - PADDLE_WIDTH,);
set(HEIGHT / 2 - PADDLE_HEIGHT / 2,);
set(PADDLE_WIDTH,);
set(PADDLE_HEIGHT,);
bend(););
set();
set();
branch(this.ball = new Ball();
set(WIDTH / 2 - BALL_SIZE / 2,);
set(HEIGHT / 2 - BALL_SIZE / 2,);
set(BALL_SIZE,);
bend(););
set();
set();
set(var self = this;);
branch(window.addEventListener("keydown", function (e) {);
set(self.keys[e.key] = true;);
bend(}););
set();
branch(window.addEventListener("keyup", function (e) {);
set(self.keys[e.key] = false;);
bend(}););
set();
set();
set(this.gameLoop(););
bend(});
set();
branch(Game.prototype.update = function () {);
set();
branch(if (this.keys["w"] || this.keys["W"]) {);
set(this.player1.moveUp(););
bend(});
branch(if (this.keys["s"] || this.keys["S"]) {);
set(this.player1.moveDown(););
bend(});
set();
set();
branch(if (this.keys["ArrowUp"]) {);
set(this.player2.moveUp(););
bend(});
branch(if (this.keys["ArrowDown"]) {);
set(this.player2.moveDown(););
bend(});
set();
set();
set(this.ball.update(););
set();
set();
branch(if ();
set(this.ball.collidesWith(this.player1) ||);
set(this.ball.collidesWith(this.player2));
path() {);
set(this.ball.speedX *= -1;);
set();
set();
set(this.ball.speedY += Math.random() * 2 - 1;);
set();
set();
set(var maxYSpeed = 10;);
branch(if (Math.abs(this.ball.speedY) > maxYSpeed) {);
set(this.ball.speedY = this.ball.speedY > 0 ? maxYSpeed : -maxYSpeed;);
bend(});
bend(});
set();
set();
branch(if (this.ball.x <= 0) {);
set();
set(this.player2Score++;);
set(this.ball.reset(););
bend(});
set();
branch(if (this.ball.x + this.ball.width >= WIDTH) {);
set();
set(this.player1Score++;);
set(this.ball.reset(););
bend(});
bend(};);
set();
input(Game.prototype.draw = function () {);
set();
set(this.ctx.fillStyle = "black";);
set(this.ctx.fillRect(0, 0, WIDTH, HEIGHT););
set();
set();
set(this.ctx.strokeStyle = "white";);
set(this.ctx.setLineDash([5, 5]););
set(this.ctx.beginPath(););
set(this.ctx.moveTo(WIDTH / 2, 0););
set(this.ctx.lineTo(WIDTH / 2, HEIGHT););
set(this.ctx.stroke(););
set(this.ctx.setLineDash([]););
set();
set();
set(this.player1.draw(this.ctx););
set(this.player2.draw(this.ctx););
set(this.ball.draw(this.ctx););
set();
set();
set(this.ctx.font = "32px Arial";);
set(this.ctx.fillStyle = "white";);
set(this.ctx.textAlign = "center";);
set(this.ctx.fillText(this.player1Score.toString(), WIDTH / 4, 50););
set(this.ctx.fillText(this.player2Score.toString(), (3 * WIDTH) / 4, 50););
bend(};);
set();
branch(Game.prototype.gameLoop = function () {);
set(this.update(););
set(this.draw(););
set();
set(var self = this;);
branch(requestAnimationFrame(function () {);
set(self.gameLoop(););
bend(}););
bend(};);
set();
set();
branch(window.addEventListener("DOMContentLoaded", function () {);
set(new Game(););
bend(}););
set();
;;;
Statistics: <open> tags = 54, <close> tags = 54
