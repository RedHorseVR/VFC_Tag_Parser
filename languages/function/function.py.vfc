;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : function.py_tagged.txt.vfc
;  File Date : 12:20:59 AM - 07:Mar:2025

event( import sys);//    
end();//
set(stack = []);//

input( def pop():);//    
branch( if len(stack) == 0:);//    
path();//
end(return "Stack is empty");//
bend(  );//    
end(return stack.pop());//
end(  );//    

input( def push(item):);//    
set(stack.append(item));//
end(  );//    

input(def add_block_end_comments(code_str):);//////
set(lines = code_str.split("\n"));//
set(result = []);//
branch(end_comments = {);//// //////
path();//
generic("def": "#enddef-------------- ",);// ////
generic("if": "#endif----------------",);// ////
generic("for": "#endfor--------------",);// ////
generic("while": "#endwhile--------------",);// ////
generic("try": "#endtry--------------",);// ////
generic("class": "#endclass--------------");//
bend(});//// //////
process(  );//   Define end comments for each block type 
set(paths = ["else", "elif", "except", "finally", "with"]);//
set(heads = ["def", "if", "for", "while", "try", "class"]);//
process(  );//   Track previous indentation level 
set(prev_indent = None);//
process(  );//   Process each line 
set(i = 0);//
set(prev_indent = 0);//
set(prevline = "");//
loop( while i < len(lines):);//    
set(line = lines[i]);//
branch( if len(lines) - 1 > i:);//    
path();//
set(nextline = lines[i + 1]);//
bend();//
branch( if i > 0:);//    
path();//
set(prevline = lines[i - 1]);//
bend(  );//    
process(  );//   Calculate current indentation 
set(stripped = line.strip());//
branch( if stripped:);////   Only  non-empty lines # branch //
path();//
set(current_indent = len(line) - len(stripped));//
process(  );//   Check if indentation decreased by one level (4 spaces or 1 tab) 
branch(if current_indent < prev_indent:);//////
path();//
process(  );//   line indentation decreasing 
set(prev_level = 0);//
branch( if i > 0:);//    
path();//
set(prev_level = len(lines[i - 1]) - len(lines[i - 1].lstrip("\t")));//
bend();//
set();//
set(this_level = len(line) - len(line.lstrip("\t")));//
set(diff_level = prev_level - this_level);//
loop( for lev in range(0, diff_level):);////   iterate over drop in indentation # loop //
branch(if any(word in line for word in heads) and not any(tok in line for tok in paths):);//////
path();//
process(  );//   head tag coming so lets prep a line for it unless a bridge coming. 
process( result.append("\t" * (current_indent) + f" "));//   <-function.py-h')# 
path( else:);//    
branch( if not any(word in prevline for word in paths):);////   not a path so we tag it # branch //
path();//
process( pass);//   result.append('\t' * (current_indent+diff_level-lev) + '<-function.py-p') # + '#<' + pop() + f'> [{prev_level, this_level }]') 
bend();//
bend();//
set();//
branch( if not any(word in line for word in paths):);////   not a path so we tag it # branch //
path();//
process( result.append("\t" * (current_indent + diff_level - lev) + " "));//   <--function.py-n') # + '#<' + pop() + f'> [{prev_level, this_level }]') 
bend(  );//    
lend();//
bend(  );//    
set();//
set();//
process(  );//   Update previous indentation for next iteration 
set(prev_indent = current_indent);//
bend();//
process(  );//   Add the current line 
set(result.append(line));//
process(  );//   Check if this is a block start 
branch( if stripped.endswith(":"):);//    
path();//
set(first_word = stripped.split()[0]);//
process(  );//   If this is a recognized block type 
branch(if first_word in end_comments:);//////
path();//
process(  );//   Find where this block ends 
set(indent = len(line) - len(stripped));//
set(j = i + 1);//
loop( while j < len(lines):);//    
set(next_line = lines[j]);//
set(next_stripped = next_line.strip());//
process(  );//   Skip empty lines 
branch( if not next_stripped:);//    
path();//
set(j += 1);//
end(continue);//
bend(  );//    
set(next_indent = len(next_line) - len(next_stripped));//
process(  );//   If next non-empty line has same or less indentation, we found the end of block 
branch(if next_indent <= indent:);//////
path();//
process(  );//   Add end comment before this line 
process(  );//   result.append('\t' * indent + end_comments[first_word]) 
set(push(first_word));//
end(break);//////
bend();//
set(j += 1);//
lend();//
process(  );//   If we reached the end of the file 
branch( if j == len(lines):);//    
path();//
set(result.append("/t." * indent + end_comments[first_word]));//
bend(  );//    
set();//
bend();//
bend();//
set();//
process(  );//   tag 
set(i += 1);//
lend();//
process(  );//   tag 
end(return "\n".join(result));//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 13158600 0 255 255 9895835 6946660 3289650
;    function.py   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 1266 121 1399 1665 67 60   567   4294966845    python.key  0