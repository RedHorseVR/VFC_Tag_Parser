;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : javascript_lang.py.vfc
;  File Date : 04:30:36 PM - 23:Mar:2025

event(import sys);// ////
event(import re);//
event(import subprocess);//
event(import os);//
end();//// // Basic language settings               # set ////
set(language = "javascript");//
set(commentmarker = "//");//
generic(multiline_comment_start = "/*");//
generic(multiline_comment_end = "*/");//
generic(literals =  ["'", '"', '`']);//
set();//
set(path_types = [ 'else', 'except', 'catch', 'case' ]);//
set(branch_types = [ 'if', 'with', 'try', 'switch'  ]);//
set(loop_types = [ 'for ', 'while ', 'do ', 'until '  ]);//
set(input_types = [ 'function', 'def', 'async', 'module'  ]);//
set(event_types = [ 'from ',  'import '  ]);//
set(output_types = [ 'print(', 'continue', '.write' ]);//
set(end_types = [ 'return ', 'return ' , 'exit(' ]);//
end();//

input(def pretty_print(source):);// // input//
generic(os.system( f"npx prettier --use-tabs --print-width 500 --single-quote --write { source }" ));// 
end();//return tabbed_source

input(def  lang_check_path( line ):);//
branch(if any(word in line for word in path_types )  :);//if line.strip() in path_types  :
path( );//
set(newline  =  '\t' + line);//
path(else:);//
set(newline  =   line);//
bend( );//
end(return newline);//

input(def  lang_filter( line  ):);//
branch(if any(word in line for word in path_types )  :);//if line.strip() in path_types  :
path( );//
output();//print( '----------------> ' , line.strip() )
set(newline  =  '\t' + line + f'{ commentmarker } path ');//
path(elif  scanTok( line,  branch_types  )   :);/// elif any(word in line for word in branch_types )  :elif   any(line.lstrip().startswith(word) for word in branch_types  )   ://
generic(push( 'bend' ));// 
set(newline  =  line + f'{ commentmarker } branch  ');//
set(# <--- add then path as default);///newline  +=  '\n' + f'{ commentmarker } path  '//
path(elif  scanTok( line, loop_types  ) :);//
process(push( 'lend' ));//
set(newline  =  line + f'{ commentmarker } loop ');//
path(elif  scanTok( line, input_types  ) :);//
process(push( 'end' ));//
set(newline  =  line + f'{ commentmarker } input ');//
path(elif  scanTok( line, event_types  ) :);//
set(newline  =  line + f'{ commentmarker } event ');//
path(elif  scanTok( line, output_types  ) :);//
set(newline  =  line + f'{ commentmarker } output ');//
path(elif  scanTok( line, end_types  ) :);//
set(newline  =  line + f'{ commentmarker } end ');//
path(else:);//
set();//newline  =   line
branch(if  len( line ) ==0   :);//
path( );//
set(newline  = '');//
set(newline  =  line + f'{ commentmarker } set ');//
path(else:);//
set(newline  =  line + f'{ commentmarker } set ');//
bend( );//
bend( );//
end(return newline);//
set(stack = []);//

input(def  pop( ):);//
generic(global stack);// ////
branch(if len( stack) >0  :);//
path( );//
generic(item = stack.pop());// 
output();//print( '\t'*8 +'...POP' , item , stack )
end(return item);//
path(else:);//
output(print( '--------------------empty stack----------------------------'));//
end(return "");// 
bend( );//
end();//

input(def  push(  item ):);//
generic(global stack);// ////
generic(stack.append( item ));// 
end();//

input(def  scanTok( line, toklist ):);//
set(sub_list = [item for item in toklist if item.startswith('.')]);// ////
set(subtok = any(f"{word}" in line for word in sub_list ));// 
branch(if len(sub_list) > 0  and subtok  :);//
path();//
end(return True);//
bend( );//
end(return  any(line.lstrip().startswith(word) for word in toklist ));//

input(def  footer( exportname  ):);//
set(ENVTOK = 'INSECTA');//
generic(foot = f';{ENVTOK} EMBEDDED SESSION INFORMATION');//  
generic(foot+= '; 255 16777215 65280 16777088 16711680 13158600 16711935 0 255 255 9895835 6946660 5308416');//  
generic(foot+= f';    { exportname } . ');// 
generic(foot+='; notepad.exe');//  
generic(foot+=f';{ENVTOK} EMBEDDED ALTSESSION INFORMATION');//  
generic(foot+= '; 1403 30 1055 2034 95 135   485   4294965576    javascript.key  0');//  
end(return foot);//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 8388863 0 255 255 9895835 16711680 1907997
;    javascript_lang.py   //   ...
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 1292 419 1980 1572 0 130   632   4294966436    javascript.key  0