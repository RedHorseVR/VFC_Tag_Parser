;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : python_lang.vfc
;  File Date : 05:11:30 PM - 09:Mar:2025

event(import sys);// ////
event(import black);// ////
event(import re);// // event //
event(import black);// // event //
generic();// // -------------------- language settings -------------------- //
end();//// // -------------------- pretty printer -------------------- ////

input(def pretty_print(source):);// // input //
generic(""");//
generic(Format Python source code using Black.);// ////
generic(This function uses Black's API to format the code.);// ////
generic(Then, it replaces every group of 4 spaces with a tab to enforce tab-only indentation.);// ////
set(The pretty printed code is printed for verification.);//// //////
generic(""");//
set();//
set(mode = black.FileMode(line_length=500, target_versions={black.TargetVersion.PY38}));// // set //
branch(try:);// // branch //
path();//
process(formatted = black.format_str(source, mode=mode));// // process //
process(formatted = re.sub(r"( {4})", "\t", formatted));// // process //
generic();//print(");   // pretty printed code:")                    # output ////
generic(formatted = add_block_end_comments( formatted ));// ////
branch(with open( 'pretty.py' , 'w' ) as write_file :);//
path();//
output(write_file.write( formatted ));// 
bend( );//
output(return formatted);//
path(except black.NothingChanged:);// // path //
generic(print(" black made no changes"));//
end(return source);// // fallback output //
bend();// ////
end();// //     //
event( import sys);//    
end();//
set(stack = []);//

input( def pop():);//    
branch( if len(stack) == 0:);//    
path();//
end(return "Stack is empty");//
bend(  );//    
end(return stack.pop());//
end(  );//    

input( def push(item):);//    
set(stack.append(item));//
end(  );//    

input(def add_block_end_comments(code_str):);//////
set(lines = code_str.split("\n"));//
set(result = []);//
branch(end_comments = {);//// //////
path();//
generic("def": "#enddef-------------- ",);// ////
generic("if": "#endif----------------",);// ////
generic("for": "#endfor--------------",);// ////
generic("while": "#endwhile--------------",);// ////
generic("try": "#endtry--------------",);// ////
generic("class": "#endclass--------------");//
bend(});//// //////
process(  );//   Define end comments for each block type 
set(paths = ["else", "elif", "except", "finally", "with"]);//
set(heads = ["def", "if", "for", "while", "try", "class"]);//
process(  );//   Track previous indentation level 
set(prev_indent = None);//
process(  );//   Process each line 
set(i = 0);//
set(prev_indent = 0);//
set(prevline = "");//
loop( while i < len(lines):);//    
set(line = lines[i]);//
branch( if len(lines) - 1 > i:);//    
path();//
set(nextline = lines[i + 1]);//
bend();//
branch( if i > 0:);//    
path();//
set(prevline = lines[i - 1]);//
bend(  );//    
process(  );//   Calculate current indentation 
set(stripped = line.strip());//
branch( if stripped:);////   Only  non-empty lines # branch //
path();//
set(current_indent = len(line) - len(stripped));//
process(  );//   Check if indentation decreased by one level (4 spaces or 1 tab) 
branch(if current_indent < prev_indent:);//////
path();//
process(  );//   line indentation decreasing 
set(prev_level = 0);//
branch( if i > 0:);//    
path();//
set(prev_level = len(lines[i - 1]) - len(lines[i - 1].lstrip("\t")));//
bend();//
set();//
set(this_level = len(line) - len(line.lstrip("\t")));//
set(diff_level = prev_level - this_level);//
loop( for lev in range(0, diff_level):);////   iterate over drop in indentation # loop //
branch(if any(word in line for word in heads) and not any(tok in line for tok in paths):);//////
path();//
process(  );//   head tag coming so lets prep a line for it unless a bridge coming. 
process( result.append("\t" * (current_indent) + f" "));//   <-function.py-h')# 
path( else:);//    
branch( if not any(word in prevline for word in paths):);////   not a path so we tag it # branch //
path();//
process( pass);//   result.append('\t' * (current_indent+diff_level-lev) + '<-function.py-p') # + '#<' + pop() + f'> [{prev_level, this_level }]') 
bend();//
bend();//
set();//
branch( if not any(word in line for word in paths):);////   not a path so we tag it # branch //
path();//
process( result.append("\t" * (current_indent + diff_level - lev) + " "));//   <--function.py-n') # + '#<' + pop() + f'> [{prev_level, this_level }]') 
bend(  );//    
lend();//
bend(  );//    
set();//
set();//
process(  );//   Update previous indentation for next iteration 
set(prev_indent = current_indent);//
bend();//
process(  );//   Add the current line 
set(result.append(line));//
process(  );//   Check if this is a block start 
branch( if stripped.endswith(":"):);//    
path();//
set(first_word = stripped.split()[0]);//
process(  );//   If this is a recognized block type 
branch(if first_word in end_comments:);//////
path();//
process(  );//   Find where this block ends 
set(indent = len(line) - len(stripped));//
set(j = i + 1);//
loop( while j < len(lines):);//    
set(next_line = lines[j]);//
set(next_stripped = next_line.strip());//
process(  );//   Skip empty lines 
branch( if not next_stripped:);//    
path();//
set(j += 1);//
end(continue);//
bend(  );//    
set(next_indent = len(next_line) - len(next_stripped));//
process(  );//   If next non-empty line has same or less indentation, we found the end of block 
branch(if next_indent <= indent:);//////
path();//
process(  );//   Add end comment before this line 
process(  );//   result.append('\t' * indent + end_comments[first_word]) 
set(push(first_word));//
end(break);//////
bend();//
set(j += 1);//
lend();//
process(  );//   If we reached the end of the file 
branch( if j == len(lines):);//    
path();//
set(result.append("/t." * indent + end_comments[first_word]));//
bend(  );//    
set();//
bend();//
bend();//
set();//
process(  );//   tag 
set(i += 1);//
lend();//
process(  );//   tag 
end(return "\n".join(result));//
branch(if __name__ == "__main__":);//// // input ////
path();//
branch(if len(sys.argv) > 1:);// ////
path();//
event();//from function import add_block_end_comments
branch(with open(sys.argv[1], "r", encoding="utf-8") as f:);//// //////
path();//
generic(source = f.read());// ////
bend();//
generic(pretty = pretty_print(source));// ////
branch(if   pretty == None  :);//
path();//
output(print( "pretty was None " ));// 
path(else:);//
set(''' -------------------------------------------- );//
branch(with open( 'pretty.py' , 'w' ) as write_file :);//
path();//
output(pass );//
output(write_file.write(pretty));// 
bend( );//
set(-------------------------------------------- ''' );//
bend( );//
output(#  // output //);//print(pretty)
path(else:);// ////
output(print("\nUsage: python python_lang.py <source_file>"));// 
bend();// // //
path(else:);//
event(from languages.function import add_block_end_comments);//
bend();// // //
generic();// // END //
end();//// // -------------------- global stack for tagMapper -------------------- ////
set(language = "python");//
generic(comment_marker = "#");//
generic(multiline_comment_start = '"""');//
generic(multiline_comment_end = '"""');//
branch();//
path(blockTypeRules = [);//// //////
generic({"type": "input",  "regex": r"^def\s+\w+\s*\(.*\):"},);// // : function definition //
set({"type": "branch", "regex": r"^if\s+.*:"},);//// // : if statement ////
set({"type": "path",   "regex": r"^(elif|else)\b.*:"},);//// // : elif/else clause ////
set({"type": "loop",   "regex": r"^(for|while)\s+.*:"},);//// // : for/while loops ////
generic({"type": "try",    "regex": r"^try\s*:"},);// // try block //
generic({"type": "except", "regex": r"^except\b.*:"},);// // except clause //
generic({"type": "finally","regex": r"^finally\s*:"},);// // finally clause //
generic({"type": "with",   "regex": r"^with\s+.*:"});// // with block //
set(]);//// //                             ////
path(closureMapping = {);//// //////
generic("input": "end",);// // function closes with "end" //
set("branch": "bend",);//// // if block closes with "bend" ////
set("path": "bend",);//// // elif/else block closes with "bend" ////
set("loop": "lend",);//// // loops close with "lend" ////
generic("try": "end",);// // try block closes with "end" //
generic("except": "end",);// // except block closes with "end" //
generic("finally": "end",);// // finally block closes with "end" //
generic("with": "end");//
set(});//// //                                     # set ////
path(outputRules = [);//// //////
set({"regex": r"print\s*\(", "tag": "output"},);//// // tag for print() calls ////
set({"regex": r"^\s*return\b", "tag": "output"});//// // tag for return statements ////
set(]);//// //                                      # set ////
bend();//
end();//// // -------------------- single-line expansion rules -------------------- ////
set(singleLineExpansions = []);// // set//
set(global _tag_stack);// // set //
set(_tag_stack = []);// // set //

input(def reset_tag_stack():);// // input //
generic(""");//
generic(Reset the language module's internal tag stack.);// ////
generic(""");//
end();// // end //
set(i = 0);//

input(def tagMapper(line, indentTag, lineNumber):);// // input //
set(global i);//
set(global _tag_stack);// // set //
set();//
set();//
set();//
process(cleaned = re.sub(r"\s*"+re.escape(comment_marker)+r"\s*tag.*", "", line).strip());// // process //
set();//status = "indent" if isIndent else "outdent"
output(print(f"DEBUG: Line {lineNumber} {i} ({ indentTag  }): {line} "));// // output //
branch( if indentTag == 'tagA'  or indentTag == 'tagX'    :);// 
path();//
branch(if re.match(r"^if\s+", cleaned, re.IGNORECASE):);// ////
path();//
set(_tag_stack.append("bend"));//// // push closure for if ////
output(return "branch");//
path(elif re.match(r"^(for|while)\s+", cleaned, re.IGNORECASE):);// ////
set(_tag_stack.append("lend"));//// // push closure for loop ////
output(return "loop");//
path(elif re.match(r"^def\s+\w+\s*\(.*\):", cleaned):);// ////
set(_tag_stack.append("end"));//// // push closure for function ////
output(return "input");//
path(elif re.match(r"^(elif|else)\b", cleaned, re.IGNORECASE):);// ////
output(return "path");//
path(elif re.match(r"^try\s*:", cleaned):);// ////
set(_tag_stack.append("bend"));//// // push closure for try ////
output(return "branch");//
path(elif re.match(r"^except\b", cleaned, re.IGNORECASE):);// ////
output(return "path");//
path(elif re.match(r"^finally\s*:", cleaned, re.IGNORECASE):);// ////
output(return "path");//
path(elif re.match(r"^with\s+", cleaned, re.IGNORECASE):);// ////
set(_tag_stack.append("bend"));//// // push closure for with ////
output(return "branch");//
path(else:);// ////
generic(_tag_stack.append("tag"));// // push default closure //
output(return "tag-----<<<");//
bend();// //   //
path(else:);// ////
branch(if _tag_stack:);// ////
path();//
output(return _tag_stack.pop());// // output closure tag from stack //
path(else:);// ////
end(return "tag");//
bend();// ////
bend();// // //
end();// // end //

input(if __name__ == "__main__":);// // input //
branch(if len(sys.argv) > 1:);// ////
path();//
branch(with open(sys.argv[1], "r", encoding="utf-8") as f:);//// //////
path();//
generic(source = f.read());// ////
bend();//
generic(pretty = pretty_print(source));// ////
output(print(");   // === Final Pretty Printed Code ===")   # output ////);//
output(print(pretty));// // output //
path(else:);//// //////
output(print("Usage: python python_lang.py <source_file>"));//// //
bend();//// // end////
end();//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 13158600 0 255 255 9895835 6946660 16384
;    python_lang.py   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 1308 372 2332 1023 290 180   914   4294954620    python.key  0