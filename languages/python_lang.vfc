;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : python_lang.vfc
;  File Date : 05:14:11 PM - 22:Mar:2025

event(import sys);// ////
event(import black);// ////
event(import re);// // event //
event(import black);// // event //
event(import os);//    
generic();// // -------------------- language settings -------------------- //
end();//// // -------------------- pretty printer -------------------- ////

input(def pretty_print(source):);// // input //
set();//
branch(try:);// // branch //
path();//
generic(os.system( f'black -l 500 -S -C  { source }'  ));//
path(except :);//
output(print(" black made no changes"));//////
bend();// ////
end();// //     //
set(lang_commentmarker = '#');// 
set(path_types = [ 'else', 'except', 'catch', 'case' ]);//
set(branch_types = [ 'if', 'with', 'try', 'switch'  ]);//
set(loop_types = [ 'for ', 'while ', 'do ', 'until '  ]);//
set(input_types = [ 'function', 'def', 'async', 'module'  ]);//
set(event_types = [ 'from ',  'import '  ]);//
set(output_types = [ 'print(', 'continue', '.write' ]);//
set(end_types = [ 'return ', 'return ' , 'exit(' ]);//
end();//

input(def  lang_check_path( line ):);//
branch(if any(word in line for word in path_types )  :);//if line.strip() in path_types  :
path( );//
set(newline  =  '\t' + line);//
path(else: );//
set(newline  =   line);//
bend( );//
end(return newline);//

input(def  lang_filter( line  ):);//
branch(if any(word in line for word in path_types )  :);//if line.strip() in path_types  :
path( );//
output();//print( '----------------> ' , line.strip() )
set(newline  =  '\t' + line + f'{ lang_commentmarker } path ');//
path(elif  scanTok( line,  branch_types  )   :);/// elif any(word in line for word in branch_types )  :elif   any(line.lstrip().startswith(word) for word in branch_types  )   ://
generic(push( 'bend' ));// 
set(newline  =  line + f'{ lang_commentmarker } branch  ');//
set(# <--- add then path as default);//newline  +=  '\n' + f'{ lang_commentmarker } path  '
path(elif  scanTok( line, loop_types  ) :);//
process(push( 'lend' ));//
set(newline  =  line + f'{ lang_commentmarker } loop ');//
path(elif  scanTok( line, input_types  ) :);//
process(push( 'end' ));//
set(newline  =  line + f'{ lang_commentmarker } input ');//
path(elif  scanTok( line, event_types  ) :);//
set(newline  =  line + f'{ lang_commentmarker } event ');//
path(elif  scanTok( line, output_types  ) :);//
set(newline  =  line + f'{ lang_commentmarker } output ');//
path(elif  scanTok( line, end_types  ) :);//
set(newline  =  line + f'{ lang_commentmarker } end ');//
path(else: );//
set();//newline  =   line
set(newline  =  line + f'{ lang_commentmarker } set ');//
bend( );//
end(return newline);//
set(stack = []);//

input(def  pop( ):);//
generic(global stack);// ////
branch(if len( stack) >0  :);//
path( );//
generic(item = stack.pop());// 
output();//print( '\t'*8 +'...POP' , item , stack )
end(return item);//
path(else: );//
output(print( '--------------------empty stack----------------------------'));//
end(return "");// 
bend( );//
end();//

input(def  push(  item ):);//
generic(global stack);// ////
generic(stack.append( item ));// 
end();//

input(def  scanTok( line, toklist ):);//
set(sub_list = [item for item in toklist if item.startswith('.')]);// ////
set(subtok = any(f"{word}" in line for word in sub_list ));// 
branch(if len(sub_list) > 0  and subtok  :);//
path();//
end(return True);//
bend( );//
end(return  any(line.lstrip().startswith(word) for word in toklist ));//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 13158600 0 255 255 9895835 6946660 16384
;    python_lang.py   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 279 393 2460 1531 59 150   973   4294966018    python.key  0