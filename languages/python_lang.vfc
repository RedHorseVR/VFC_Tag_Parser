;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : python_lang.vfc
;  File Date : 10:42:14 PM - 06:Mar:2025

event(import sys);// ////
event(import black);// ////
event(import re);// // event //
event(import black);// // event //
generic();// // -------------------- language settings -------------------- //
end();//// // -------------------- pretty printer -------------------- ////

input(def pretty_print(source):);// // input //
generic(""");//
generic(Format Python source code using Black.);// ////
generic(This function uses Black's API to format the code.);// ////
generic(Then, it replaces every group of 4 spaces with a tab to enforce tab-only indentation.);// ////
set(The pretty printed code is printed for verification.);//// //////
generic(""");//
set();//
set(mode = black.FileMode(line_length=500, target_versions={black.TargetVersion.PY38}));// // set //
branch(try:);// // branch //
path();//
process(formatted = black.format_str(source, mode=mode));// // process //
process(formatted = re.sub(r"( {4})", "\t", formatted));// // process //
generic();//print(");   // pretty printed code:")                    # output ////
generic(formatted = add_block_end_comments( formatted ));// ////
branch(with open( 'pretty.py' , 'w' ) as write_file :);//
path();//
output(write_file.write( formatted ));// 
bend( );//
output(return formatted);//
path(except black.NothingChanged:);// // path //
generic(print(" black made no changes"));//
end(return source);// // fallback output //
bend();// ////
end();// //     //
branch(if __name__ == "__main__":);//// // input ////
path();//
branch(if len(sys.argv) > 1:);// ////
path();//
event(from function import add_block_end_comments);//
branch(with open(sys.argv[1], "r", encoding="utf-8") as f:);//// //////
path();//
generic(source = f.read());// ////
bend();//
generic(pretty = pretty_print(source));// ////
branch(if   pretty == None  :);//
path();//
output(print( "pretty was None " ));// 
path(else: );//
branch(with open( 'pretty.py' , 'w' ) as write_file :);//
path();//
output(write_file.write(pretty));// 
bend( );//
bend( );//
output(#  // output //);//print(pretty)
path(else:);// ////
output(print("\nUsage: python python_lang.py <source_file>"));// 
bend();// // //
path(else: );//
event(from languages.function import add_block_end_comments);//
bend();// // //
generic();// // END //
end();//// // -------------------- global stack for tagMapper -------------------- ////
set(language = "python");//
generic(comment_marker = "#");//
generic(multiline_comment_start = '"""');//
generic(multiline_comment_end = '"""');//
branch();//
path(blockTypeRules = [);//// //////
generic({"type": "input",  "regex": r"^def\s+\w+\s*\(.*\):"},);// // : function definition //
set({"type": "branch", "regex": r"^if\s+.*:"},);//// // : if statement ////
set({"type": "path",   "regex": r"^(elif|else)\b.*:"},);//// // : elif/else clause ////
set({"type": "loop",   "regex": r"^(for|while)\s+.*:"},);//// // : for/while loops ////
generic({"type": "try",    "regex": r"^try\s*:"},);// // try block //
generic({"type": "except", "regex": r"^except\b.*:"},);// // except clause //
generic({"type": "finally","regex": r"^finally\s*:"},);// // finally clause //
generic({"type": "with",   "regex": r"^with\s+.*:"});// // with block //
set(]);//// //                             ////
path(closureMapping = {);//// //////
generic("input": "end",);// // function closes with "end" //
set("branch": "bend",);//// // if block closes with "bend" ////
set("path": "bend",);//// // elif/else block closes with "bend" ////
set("loop": "lend",);//// // loops close with "lend" ////
generic("try": "end",);// // try block closes with "end" //
generic("except": "end",);// // except block closes with "end" //
generic("finally": "end",);// // finally block closes with "end" //
generic("with": "end");//
set(});//// //                                     # set ////
path(outputRules = [);//// //////
set({"regex": r"print\s*\(", "tag": "output"},);//// // tag for print() calls ////
set({"regex": r"^\s*return\b", "tag": "output"});//// // tag for return statements ////
set(]);//// //                                      # set ////
bend();//
end();//// // -------------------- single-line expansion rules -------------------- ////
set(singleLineExpansions = []);// // set//
set(global _tag_stack);// // set //
set(_tag_stack = []);// // set //

input(def reset_tag_stack():);// // input //
generic(""");//
generic(Reset the language module's internal tag stack.);// ////
generic(""");//
end();// // end //
set(i = 0);//

input(def tagMapper(line, indentTag, lineNumber):);// // input //
set(global i);//
set(global _tag_stack);// // set //
set();//
set();//
set();//
process(cleaned = re.sub(r"\s*"+re.escape(comment_marker)+r"\s*tag.*", "", line).strip());// // process //
set();//status = "indent" if isIndent else "outdent"
output(print(f"DEBUG: Line {lineNumber} {i} ({ indentTag  }): {line} "));// // output //
branch( if indentTag == 'tagA'  or indentTag == 'tagX'    :);// 
path();//
branch(if re.match(r"^if\s+", cleaned, re.IGNORECASE):);// ////
path();//
set(_tag_stack.append("bend"));//// // push closure for if ////
output(return "branch");//
path(elif re.match(r"^(for|while)\s+", cleaned, re.IGNORECASE):);// ////
set(_tag_stack.append("lend"));//// // push closure for loop ////
output(return "loop");//
path(elif re.match(r"^def\s+\w+\s*\(.*\):", cleaned):);// ////
set(_tag_stack.append("end"));//// // push closure for function ////
output(return "input");//
path(elif re.match(r"^(elif|else)\b", cleaned, re.IGNORECASE):);// ////
output(return "path");//
path(elif re.match(r"^try\s*:", cleaned):);// ////
set(_tag_stack.append("bend"));//// // push closure for try ////
output(return "branch");//
path(elif re.match(r"^except\b", cleaned, re.IGNORECASE):);// ////
output(return "path");//
path(elif re.match(r"^finally\s*:", cleaned, re.IGNORECASE):);// ////
output(return "path");//
path(elif re.match(r"^with\s+", cleaned, re.IGNORECASE):);// ////
set(_tag_stack.append("bend"));//// // push closure for with ////
output(return "branch");//
path(else:);// ////
generic(_tag_stack.append("tag"));// // push default closure //
output(return "tag-----<<<");//
bend();// //   //
path(else:);// ////
branch(if _tag_stack:);// ////
path();//
output(return _tag_stack.pop());// // output closure tag from stack //
path(else:);// ////
end(return "tag");//
bend();// ////
bend();// // //
end();// // end //



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 13158600 0 255 255 9895835 6946660 16384
;    python_lang.py   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 1447 275 1819 1173 22 108   694   4294967271    python.key  0