# set 
# set 
import subprocess# event 
import time# event 
import os# event 
import curses# event 
from datetime import datetime# event 
def get_gpu_info():# input 
	try:# branch  

# path
		result = subprocess.run(# set 
			[# set 
				'nvidia-smi',# set 
				'--query-gpu=index,name,temperature.gpu,utilization.gpu,utilization.memory,memory.used,memory.total,power.draw',# set 
				'--format=csv,noheader,nounits',# set 
								# set  # bend 
			],# set 
			stdout=subprocess.PIPE,# set 
			stderr=subprocess.PIPE,# set 
			text=True,# set 
			check=True,# set 
						# set  # end 
		)# set 
		gpus = []# set 
		for line in result.stdout.strip().split('\n'):# loop 
			values = [val.strip() for val in line.split(',')]# set 
			if len(values) >= 8:# branch  

# path
				gpu = {# set 
					'id': values[0],# set 
					'name': values[1],# set 
					'temp': values[2],# set 
					'gpu_util': values[3],# set 
					'mem_util': values[4],# set 
					'mem_used': values[5],# set 
					'mem_total': values[6],# set 
					'power': values[7],# set 
										# set  # bend 
				}# set 
				gpus.append(gpu)# set 
								# set  # lend 
						# set  #  
		return gpus# end 
		# set 
		except subprocess.CalledProcessError as e:# path 
		return [{'error': f"Error executing nvidia-smi: {e.stderr}"}]# end 
		# set 
		except Exception as e:# path 
		return [{'error': f"Unexpected error: {str(e)}"}]# end 
				# set  #  
		# set  #  
def draw_gpu_info(stdscr, refresh_rate=1):# input 
	curses.start_color()# set 
	curses.use_default_colors()# set 
	curses.init_pair(1, curses.COLOR_GREEN, -1)# set 
	curses.init_pair(2, curses.COLOR_YELLOW, -1)# set 
	curses.init_pair(3, curses.COLOR_RED, -1)# set 
	GREEN = curses.color_pair(1)# set 
	YELLOW = curses.color_pair(2)# set 
	RED = curses.color_pair(3)# set 
	curses.curs_set(0)# set 
	try:# branch  

# path
		while True:# loop 
			max_y, max_x = stdscr.getmaxyx()# set 
			stdscr.clear()# set 
			current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")# set 
			header = f"GPU Monitor for WSL - {current_time} (Press 'q' to quit)"# set 
			stdscr.addstr(0, 0, header, curses.A_BOLD)# set 
			stdscr.addstr(1, 0, "=" * min(len(header), max_x - 1))# set 
			gpus = get_gpu_info()# set 
			row = 3# set 
			for gpu in gpus:# loop 
				if 'error' in gpu:# branch  

# path
					stdscr.addstr(row, 0, f"Error: {gpu['error']}")# set 
					row += 1# set 
					continue# output 
										# set  # bend 
				stdscr.addstr(row, 0, f"GPU {gpu['id']}: {gpu['name']}", curses.A_BOLD)# set 
				row += 1# set 
				temp = float(gpu['temp'])# set 
				temp_color = GREEN if temp < 70 else (YELLOW if temp < 85 else RED)# set 
				stdscr.addstr(row, 2, f"Temperature: ", curses.A_BOLD)# set 
				stdscr.addstr(f"{temp}C", temp_color)# set 
				row += 1# set 
				gpu_util = float(gpu['gpu_util'])# set 
				gpu_util_color = GREEN if gpu_util < 50 else (YELLOW if gpu_util < 90 else RED)# set 
				bar_width = min(50, max_x - 25)# set 
				filled_width = int(bar_width * gpu_util / 100)# set 
				stdscr.addstr(row, 2, f"GPU Utilization: ", curses.A_BOLD)# set 
				stdscr.addstr(f"{gpu_util}% ", gpu_util_color)# set 
				stdscr.addstr("[")# set 
				stdscr.addstr("=" * filled_width, gpu_util_color)# set 
				stdscr.addstr(" " * (bar_width - filled_width))# set 
				stdscr.addstr("]")# set 
				row += 1# set 
				mem_used = float(gpu['mem_used'])# set 
				mem_total = float(gpu['mem_total'])# set 
				mem_percent = (mem_used / mem_total) * 100 if mem_total > 0 else 0# set 
				mem_color = GREEN if mem_percent < 50 else (YELLOW if mem_percent < 90 else RED)# set 
				filled_width = int(bar_width * mem_percent / 100)# set 
				stdscr.addstr(row, 2, f"Memory Usage: ", curses.A_BOLD)# set 
				stdscr.addstr(f"{mem_used}/{mem_total} MB ({mem_percent:.1f}%) ", mem_color)# set 
				stdscr.addstr("[")# set 
				stdscr.addstr("=" * filled_width, mem_color)# set 
				stdscr.addstr(" " * (bar_width - filled_width))# set 
				stdscr.addstr("]")# set 
				row += 1# set 
				stdscr.addstr(row, 2, f"Power Usage: ", curses.A_BOLD)# set 
				stdscr.addstr(f"{gpu['power']} W")# set 
				row += 2# set 
								# set  # lend 
			stdscr.addstr(row, 0, f"Refresh rate: {refresh_rate} second(s). Press '+' to increase, '-' to decrease.")# set 
			stdscr.refresh()# set 
			stdscr.timeout(refresh_rate * 1000)# set 
			key = stdscr.getch()# set 
			if key == ord('q'):# branch  

# path
				break# set 
				# set 
				elif key == ord('+') or key == ord('='):# path 
				refresh_rate = max(0.1, refresh_rate - 0.1)# set 
				# set 
				elif key == ord('-'):# path 
				refresh_rate = min(10, refresh_rate + 0.1)# set 
								# set  # bend 
						# set  # lend 
		# set 
		except KeyboardInterrupt:# path 
		pass# set 
				# set  # bend 
		# set  # end 
def main():# input 
	try:# branch  

# path
		subprocess.run(['nvidia-smi', '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)# set 
		# set 
		except (subprocess.CalledProcessError, FileNotFoundError):# path 
		print("Error: nvidia-smi not found. Make sure NVIDIA drivers are installed correctly in WSL.")# output 
		return# set 
				# set  # bend 
	curses.wrapper(draw_gpu_info)# set 
		# set  # end 
if __name__ == "__main__":# branch  

# path
	main()# set 
# bend
# end
