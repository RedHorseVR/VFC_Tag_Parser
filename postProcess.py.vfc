;  IRL FlowCode Version: Version 10.0
;  c1995-2015: Visual Flow Coder by 2LResearch
;
;  File Name : postProcess.py.vfc
;  File Date : 05:37:03 PM - 09:Mar:2025


input(def match_tok( tok , string  ):);// 
generic(pattern = r'^[^\w]*' + re.escape(tok));// ////
generic(match = re.match(pattern, string));// ////
end(return match is not None);//

input(def  postProcess( filename , comment_marker ):);//
branch(try:);//// //////
path();//
branch(with open(filename, 'r') as file:);//// //////
path();//
generic(VFCsplitter = '//' ;);//VFCsplitter = '// <postProcess!!!! ' ;
branch(with open( f'{filename}.vfc' , 'w' ) as write_file :);//
path();//
loop(for line in file:);// ////
generic(code = line.strip());//
generic(comment = "");//
generic(VFCobj = 'event');//
branch(if comment_marker in line:);// ////
path();//
output();//print( '------------------------------------------------' , comment_marker )
set(code, comment = code.split(comment_marker, 1));//
branch(if 'input' in comment   :);//
path( );//
set(VFCobj = 'input' ;);//
path(elif  match_tok( 'branch' , comment )  :);//elif  'branch' in comment  :
set(VFCobj = 'branch' ;);//
path(elif  match_tok(  'loop' , comment ) :);//
set(VFCobj = 'loop' ;);//
path(elif  match_tok( 'output' , comment )  :);//
set(VFCobj = 'output' ;);//
path(elif  match_tok( 'event' , comment )  :);//
set(VFCobj = 'event' ;);//
path(elif  match_tok( 'path' , comment )  :);//
set(VFCobj = 'path' ;);//
path(elif  match_tok( 'lend' , comment )  :);//
set(VFCobj = 'lend' ;);//
path(elif  match_tok( 'bend' , comment )  :);//
set(VFCobj = 'bend' ;);//
path(elif  match_tok( 'end' , comment )  :);//
set(VFCobj = 'end' ;);//
path(else:);//
set(VFCobj = 'generic' ;);//VFCobj = 'process' ;
bend( );//
set();//
generic(pattern = r'\b' + re.escape( VFCobj ) + r'\b');// remove the tag commant type
set(comment = re.sub(pattern, '', comment, count=1).strip());//
output(VFCline =  f'{VFCobj}( {code} );{VFCsplitter}   {comment.strip()} ');//
generic();//print(code.strip())
generic();//print(f"{comment_marker} **  {comment.strip()}")
path(else:);//<----- use generic mappings for now for outputs and ends
branch(if  len(comment.strip()) > 0  :);//
path( );//
output(VFCline =f'{ match_GENERIC_type(code.strip()) }({ code.strip() });{VFCsplitter }  {comment_marker} -----> {comment.strip()} ');//VFCline =f'set({code.strip()});{VFCsplitter }>>>> {comment.strip()} '
path(else: );//
output(VFCline =f'{ match_GENERIC_type(code.strip()) }({ code.strip() });{VFCsplitter}');//VFCline =f'set({code.strip()});{VFCsplitter }>>>> {comment.strip()} '
bend( );//
bend();//
output(print( VFCline  ));//
branch(if  "def " in VFCline and VFCobj == 'input' :);//
path( );//
output(write_file.write( f'end();{VFCsplitter}   <-- inserted by postProcess.py'  + '\n' ));//
output( write_file.write(VFCline + '\n'));//// //
path(else: );//
generic( write_file.write(VFCline + '\n'));// 
bend( );//
lend();//
bend( );//
bend();//
path(except FileNotFoundError:);//// //////
output(print(f"The file {filename} does not exist."));//// //////
path(except Exception as e:);//// //////
output(print(f"An error occurred: {e}"));//// //////
set();//////
bend();//
end(return);//
event(import re );//
event(import sys );//

input(def match_GENERIC_type(  search_str ):);//
output(genericTypes = {  "output" : ["alert", "throw", "console", "print", "echo" , "write" ] ,  "set" : ["=", "var const"] , "end" : [ "return", "end" , "continue" , "break" ] ,);//
output( "event": ["import", "include" ] });//
generic();//search_words = set(search_str.split())
loop(for key, value in genericTypes.items():);// 
loop(for tok  in  value:);//
generic(pattern = r'^[^\w]*' + re.escape(tok));// ////
generic(match = re.match(pattern, search_str ));// 
branch(if match  :);//if search_str == tok :
path();//
end(return key);//// //////
bend();//////
lend( );//
lend();//
end(return 'set');//
end();//
branch(if __name__ == '__main__':);//
path();//
branch(if   len( sys.argv ) < 3  :);//
path();//
output(print( 'usage:\n\tpostProcess VFC_tag_file  , inline_comment_token ' ));//
path(else: );//
process(postProcess( sys.argv[1] , sys.argv[2] ));//////
bend( );//
process();// postProcess(  'testo.js_tagged.txt'  , '//' )
process();// postProcess(  'testo.py_tagged.txt' , '#'  )
process();// postProcess(  'function.py_tagged.txt' , '#'  )
bend( );//
end();//
end();//
end();//
end();//
end();//



;INSECTA EMBEDDED SESSION INFORMATION
; 255 16777215 65280 16777088 16711680 13158600 8453888 0 255 255 65535 12632256 64
;    postProcess.py   #   .
; notepad.exe
;INSECTA EMBEDDED ALTSESSION INFORMATION
; 846 101 2502 1644 41 140   4294965765   4294966564    python.key  0