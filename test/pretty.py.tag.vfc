event( import argparse   );//    
event( import os   );//    
event( import re   );//    
event( import sys   );//    
process(  );//   Helper to load a language module based on command line argument. 
end();//   <-- inserted by postProcess.py
input( def load_language_module(lang_name):  );//    
set(lang_name = lang_name.lower());//
branch( if lang_name == "javascript":  );//    
event(import languages.javascript_lang as mod);//
path( elif lang_name == "python":  );//    
event(import languages.python_lang as mod);//
path( elif lang_name == "perl":  );//    
event(import languages.perl_lang as mod);//
path( else:  );//    
set(sys.exit("Unsupported language: " + lang_name));//
bend(  );//    
end(return mod);//
end(  );//    
process(  );//   Convert groups of spaces to tabs (assuming 4 spaces per tab).  # event 
end();//   <-- inserted by postProcess.py
input( def convert_spaces_to_tabs(text, spaces_per_tab=4):  );//    
end(return re.sub(" {" + str(spaces_per_tab) + r"}", "\t", text));//
end(  );//    
process(  );//   ----- Phase 1: Pretty Print, Reindent & Mark Block Lines ----- 
end();//   <-- inserted by postProcess.py
input( def phase1_reindent(lines, comment_marker):  );//    
set(""");//
set(Assumes the source has been pretty printed.);//
set(Reindent the code using a simple brace counter.);//
set(Every line that ends with "{" or starts with "}" is appended with the generic tag " tag".);//
set(Additionally, if a control statement does not end with "{" but the following line is a lone "{",);//
set(then mark the control statement with " tag-header" and the brace line with " tag-brace".);//
set(""");//
set(indent_level = 0);//
set(new_lines = []);//
set(i = 0);//
loop( while i < len(lines):  );//    
set(line = lines[i].rstrip());//
process(  );//   Look ahead for a header pair. 
branch( if i < len(lines) - 1 and not line.rstrip().endswith("{"):  );//    
set(next_line = lines[i + 1].rstrip());//
branch( if next_line.strip() == "{" or next_line.strip().startswith("{" + " " + comment_marker + " tag"):  );//    
set(new_indent = "\t" * indent_level);//
process(  );//   Mark control statement with special header marker. 
branch( if comment_marker + " tag-header" not in line:  );//    
set(new_lines.append(new_indent + line.strip() + " " + comment_marker + " tag-header"));//
path( else:  );//    
set(new_lines.append(new_indent + line.strip()));//
bend(  );//    
set(indent_level += 1);//
set(new_indent = "\t" * indent_level);//
process(  );//   Mark lone brace with special brace marker. 
branch( if comment_marker + " tag-brace" not in next_line:  );//    
set(new_lines.append(new_indent + next_line.strip() + " " + comment_marker + " tag-brace"));//
path( else:  );//    
set(new_lines.append(new_indent + next_line.strip()));//
bend(  );//    
set(i += 2);//
end(continue);//
bend(  );//    
set();//
bend(  );//    
process(  );//   Normal processing. 
set(stripped = line.strip());//
branch( if stripped.startswith("}"):  );//    
set(indent_level = max(0, indent_level - 1));//
bend(  );//    
set(new_indent = "\t" * indent_level);//
branch( if stripped.endswith("{") or stripped.startswith("}"):  );//    
branch( if comment_marker + " tag" not in stripped:  );//    
set(new_lines.append(new_indent + stripped + " " + comment_marker + " tag"));//
path( else:  );//    
set(new_lines.append(new_indent + stripped));//
bend(  );//    
set();//
path( else:  );//    
set(new_lines.append(new_indent + stripped));//
branch( if stripped.endswith("{"):  );//    
set(indent_level += 1);//
bend(  );//    
set(i += 1);//
bend(  );//    
end(return new_lines);//
lend(  );//    
process(  );//   ----- Phase 2: Discriminate & Map Tags Using tagMapper() and a Stack ----- 
end();//   <-- inserted by postProcess.py
input( def phase2_map_tags(lines, comment_marker, lang):  );//    
set(""");//
set(Process lines marked with a generic tag.);//
set(For header lines:);//
set(- If a line contains "tag-header", remove that marker and call lang.tagMapper() with isIndent=True);//
set(on the header's content. Replace the marker with the refined tag and push the expected closure (via lang.closureMapping));//
set(onto a local stack.);//
set(- For the following line marked "tag-brace", simply replace its marker with " path".);//
set(- For normal header lines (ending with "{ tag"), process similarly.);//
set(For closing lines (lines starting with "}" with " tag"), call lang.tagMapper() with isIndent=False to get the refined closing tag.);//
set(""");//
set(new_lines = []);//
process( stack = []   );//   local stack for expected closures 
set(line_num = 0);//
end();//   <-- inserted by postProcess.py
input( def remove_marker(line, marker):  );//    
end(return re.sub(r"\s*" + re.escape(comment_marker) + r"\s*" + re.escape(marker), "", line));//
loop( for line in lines:  );//    
set(line_num += 1);//
process(  );//   Process header line with "tag-header". 
branch( if comment_marker + " tag-header" in line:  );//    
set(header_line = line);//
set(cleaned = remove_marker(header_line, "tag-header").rstrip());//
set(refined = lang.tagMapper(cleaned, True, line_num));//
process( new_header = re.sub(  );//   tag-----<<< 
set(r"\s*" + re.escape(comment_marker) + r"\s*tag-header",);//
set(" " + comment_marker + " " + refined,);//
set(header_line,);//
set();//
process(  );//   tag 
set());//
set(new_lines.append(new_header));//
set(expected = lang.closureMapping.get(refined, refined));//
set(stack.append(expected));//
end(continue);//
bend(  );//    
process(  );//   Process the following brace line marked "tag-brace". 
branch( if comment_marker + " tag-brace" in line:  );//    
process( new_brace = re.sub(  );//   tag-----<<< 
set(r"\s*" + re.escape(comment_marker) + r"\s*tag-brace",);//
set(" " + comment_marker + " path",);//
set(line,);//
set();//
process(  );//   tag 
set());//
set(new_lines.append(new_brace));//
end(continue);//
bend(  );//    
process(  );//   Process normal header lines with generic "tag". 
branch( if comment_marker + " tag" in line:  );//    
set(stripped = line.strip());//
branch( if stripped.endswith("{ " + comment_marker + " tag"):  );//    
set(header_line = line);//
set(cleaned = remove_marker(header_line, "tag").rstrip());//
branch( if cleaned.endswith("{"):  );//    
set(header_content = cleaned[:-1].strip());//
path( else:  );//    
set(header_content = cleaned.strip());//
bend(  );//    
set(refined = lang.tagMapper(header_content, True, line_num));//
process( new_line = re.sub(  );//   tag-----<<< 
set(r"\s*" + re.escape(comment_marker) + r"\s*tag",);//
set(" " + comment_marker + " " + refined,);//
set(line,);//
set();//
process(  );//   tag 
set());//
set(new_lines.append(new_line));//
set(expected = lang.closureMapping.get(refined, refined));//
set(stack.append(expected));//
end(continue);//
bend(  );//    
process(  );//   Process closing lines marked with generic "tag". 
branch( if stripped.startswith("}") and (comment_marker + " tag") in stripped:  );//    
set(base_line = re.sub(r"\s*" + re.escape(comment_marker) + r"\s*tag", "", line).rstrip());//
set(refined = lang.tagMapper(base_line, False, line_num));//
set(new_line = base_line + " " + comment_marker + " " + refined);//
set(new_lines.append(new_line));//
end(continue);//
bend(  );//    
set();//
bend(  );//    
process(  );//   Lines without any generic marker pass through. 
set(new_lines.append(line));//
lend(  );//    
end(return new_lines);//
end(  );//    
set();//
end();//   <-- inserted by postProcess.py
input( def main():  );//    
set(parser = argparse.ArgumentParser(description="VFCtagger: Pretty print and tag code with structure."));//
set(parser.add_argument("language", help="Language (e.g., javascript, python, perl)"));//
set(parser.add_argument("file", help="Source file to tag"));//
set(args = parser.parse_args());//
process(  );//   Load language module. 
set(lang = None);//
branch( try:  );//    
set(lang = load_language_module(args.language.lower()));//
path( except Exception as e:  );//    
set(sys.exit("Error loading language module: " + str(e)));//
branch( try:  );//    
branch( with open(args.file, "r", encoding="utf-8") as f:  );//    
set(source = f.read());//
bend(  );//    
set();//
path( except Exception as e:  );//    
set(sys.exit(f"Error reading source file: {e}"));//
bend(  );//    
process(  );//   Use the language module's pretty_print() function to format the code. 
set(formatted = lang.pretty_print(source));//
process(  );//   Convert any spaces to tabs. 
set(formatted = convert_spaces_to_tabs(formatted, spaces_per_tab=4));//
set(lines = formatted.splitlines());//
process(  );//   Reset the language module's tag stack. 
set(lang.reset_tag_stack());//
process(  );//   Phase 1: Reindent and mark block headers/closers. 
set(phase1_lines = phase1_reindent(lines, lang.comment_marker));//
process(  );//   Phase 2: Discriminate and map tags using the language module's tagMapper(). 
set(final_lines = phase2_map_tags(phase1_lines, lang.comment_marker, lang));//
set(output_file = os.path.basename(args.file) + ".txt");//
branch( try:  );//    
branch( with open(output_file, "w", encoding="utf-8") as out:  );//    
set(out.write(f"{lang.comment_marker} TAGGED FOR VFC\n"));//
set(out.write(f"{lang.comment_marker} TAGGED FOR VFC\n"));//
loop( for l in final_lines:  );//    
set(out.write(l + "\n"));//
lend(  );//    
set();//
bend(  );//    
set();//
path( except Exception as e:  );//    
set(sys.exit(f"Error writing output file: {e}"));//
bend(  );//    
output(print(f"Output written to: {output_file}"));//
bend(  );//    
set(if __name__ == "__main__":);//
end(  );//   endif---------------- 
end(  );//   endif---------------- 
end(  );//   endif---------------- 
end(  );//   endif---------------- 
set(main());//
