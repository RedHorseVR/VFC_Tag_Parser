import argparse  # event
import os  # event
import re  # event
import sys  # event
# Helper to load a language module based on command line argument.
# input
def load_language_module(lang_name): # input |+++++++++++++ OPEN 
	lang_name = lang_name.lower()
	# branch
	if lang_name == "javascript": # branch |+++++++++++++ OPEN 
		import languages.javascript_lang as mod
	# bend
	<------------------------------------h # bend |+++++++++++++ CLOSE 
	# path
	elif lang_name == "python": # path |+++++++++++++ OPEN 
		import languages.python_lang as mod
	# end
	<------------------------------------h # end |+++++++++++++ CLOSE 
	# path
	elif lang_name == "perl": # path |+++++++++++++ OPEN 
		import languages.perl_lang as mod
		<----------------p
	# path
	else: # path |+++++++++++++ BRIDGE 
		sys.exit("Unsupported language: " + lang_name)
		<----------------p
		<---------------n
	# tag
	return mod # tag |+++++++++++++ CLOSE 
# tag
# Convert groups of spaces to tabs (assuming 4 spaces per tab).  # event # tag |+++++++++++++ CLOSE 
# input
def convert_spaces_to_tabs(text, spaces_per_tab=4): # input |+++++++++++++ OPEN 
	return re.sub(" {" + str(spaces_per_tab) + r"}", "\t", text)
# end
# ----- Phase 1: Pretty Print, Reindent & Mark Block Lines ----- # end |+++++++++++++ CLOSE 
# input
def phase1_reindent(lines, comment_marker): # input |+++++++++++++ OPEN 
	"""
	Assumes the source has been pretty printed.
	Reindent the code using a simple brace counter.
	Every line that ends with "{" or starts with "}" is appended with the generic tag " tag".
	Additionally, if a control statement does not end with "{" but the following line is a lone "{",
	then mark the control statement with " tag-header" and the brace line with " tag-brace".
	"""
	indent_level = 0
	new_lines = []
	i = 0
	# loop
	while i < len(lines): # loop |+++++++++++++ OPEN 
		line = lines[i].rstrip()
		# Look ahead for a header pair.
		# branch
		if i < len(lines) - 1 and not line.rstrip().endswith("{"): # branch |+++++++++++++ OPEN 
			next_line = lines[i + 1].rstrip()
			# branch
			if next_line.strip() == "{" or next_line.strip().startswith("{" + " " + comment_marker + " tag"): # branch |+++++++++++++ OPEN 
				new_indent = "\t" * indent_level
				# Mark control statement with special header marker.
				# branch
				if comment_marker + " tag-header" not in line: # branch |+++++++++++++ OPEN 
					new_lines.append(new_indent + line.strip() + " " + comment_marker + " tag-header")
					<----------------p
				# path
				else: # path |+++++++++++++ BRIDGE 
					new_lines.append(new_indent + line.strip())
					<----------------p
					<---------------n
				# bend
				indent_level += 1 # bend |+++++++++++++ CLOSE 
				new_indent = "\t" * indent_level
				# Mark lone brace with special brace marker.
				# branch
				if comment_marker + " tag-brace" not in next_line: # branch |+++++++++++++ OPEN 
					new_lines.append(new_indent + next_line.strip() + " " + comment_marker + " tag-brace")
					<----------------p
				# path
				else: # path |+++++++++++++ BRIDGE 
					new_lines.append(new_indent + next_line.strip())
					<----------------p
					<---------------n
				# bend
				i += 2 # bend |+++++++++++++ CLOSE 
				continue
				<----------------p
				<---------------n
			# bend
			<----------------p # bend |+++++++++++++ CLOSE 
			<---------------n
		# bend
		# Normal processing. # bend |+++++++++++++ CLOSE 
		stripped = line.strip()
		# branch
		if stripped.startswith("}"): # branch |+++++++++++++ OPEN 
			indent_level = max(0, indent_level - 1)
			<----------------p
			<---------------n
		# bend
		new_indent = "\t" * indent_level # bend |+++++++++++++ CLOSE 
		# branch
		if stripped.endswith("{") or stripped.startswith("}"): # branch |+++++++++++++ OPEN 
			# branch
			if comment_marker + " tag" not in stripped: # branch |+++++++++++++ OPEN 
				new_lines.append(new_indent + stripped + " " + comment_marker + " tag")
				<----------------p
			# path
			else: # path |+++++++++++++ BRIDGE 
				new_lines.append(new_indent + stripped)
				<----------------p
			# bend
			<----------------p # bend |+++++++++++++ CLOSE 
		# path
		else: # path |+++++++++++++ BRIDGE 
			new_lines.append(new_indent + stripped)
		# bend
		<------------------------------------h # bend |+++++++++++++ CLOSE 
		# branch
		if stripped.endswith("{"): # branch |+++++++++++++ OPEN 
			indent_level += 1
			<----------------p
			<---------------n
		# bend
		i += 1 # bend |+++++++++++++ CLOSE 
		<----------------p
		<---------------n
	# lend
	return new_lines # lend |+++++++++++++ CLOSE 
# end
# ----- Phase 2: Discriminate & Map Tags Using tagMapper() and a Stack ----- # end |+++++++++++++ CLOSE 
# input
def phase2_map_tags(lines, comment_marker, lang): # input |+++++++++++++ OPEN 
	"""
	Process lines marked with a generic tag.
	For header lines:
	  - If a line contains "tag-header", remove that marker and call lang.tagMapper() with isIndent=True
		on the header's content. Replace the marker with the refined tag and push the expected closure (via lang.closureMapping)
		onto a local stack.
	  - For the following line marked "tag-brace", simply replace its marker with " path".
	  - For normal header lines (ending with "{ tag"), process similarly.
	For closing lines (lines starting with "}" with " tag"), call lang.tagMapper() with isIndent=False to get the refined closing tag.
	"""
	new_lines = []
	stack = []  # local stack for expected closures
	line_num = 0
	# input
	def remove_marker(line, marker): # input |+++++++++++++ OPEN 
		return re.sub(r"\s*" + re.escape(comment_marker) + r"\s*" + re.escape(marker), "", line)
	# loop
	for line in lines: # loop |+++++++++++++ BRIDGE 
		line_num += 1
		# Process header line with "tag-header".
		# branch
		if comment_marker + " tag-header" in line: # branch |+++++++++++++ OPEN 
			header_line = line
			cleaned = remove_marker(header_line, "tag-header").rstrip()
			refined = lang.tagMapper(cleaned, True, line_num)
			# tag-----<<<
			new_header = re.sub( # tag-----<<< |+++++++++++++ OPEN 
				r"\s*" + re.escape(comment_marker) + r"\s*tag-header",
				" " + comment_marker + " " + refined,
				header_line,
				<----------------p
				<---------------n
			# tag
			) # tag |+++++++++++++ CLOSE 
			new_lines.append(new_header)
			expected = lang.closureMapping.get(refined, refined)
			stack.append(expected)
			continue
			<----------------p
			<---------------n
		# bend
		# Process the following brace line marked "tag-brace". # bend |+++++++++++++ CLOSE 
		# branch
		if comment_marker + " tag-brace" in line: # branch |+++++++++++++ OPEN 
			# tag-----<<<
			new_brace = re.sub( # tag-----<<< |+++++++++++++ OPEN 
				r"\s*" + re.escape(comment_marker) + r"\s*tag-brace",
				" " + comment_marker + " path",
				line,
				<----------------p
				<---------------n
			# tag
			) # tag |+++++++++++++ CLOSE 
			new_lines.append(new_brace)
			continue
			<----------------p
		# bend
		# Process normal header lines with generic "tag". # bend |+++++++++++++ CLOSE 
		# branch
		if comment_marker + " tag" in line: # branch |+++++++++++++ OPEN 
			stripped = line.strip()
			# branch
			if stripped.endswith("{ " + comment_marker + " tag"): # branch |+++++++++++++ OPEN 
				header_line = line
				cleaned = remove_marker(header_line, "tag").rstrip()
				# branch
				if cleaned.endswith("{"): # branch |+++++++++++++ OPEN 
					header_content = cleaned[:-1].strip()
					<----------------p
				# path
				else: # path |+++++++++++++ BRIDGE 
					header_content = cleaned.strip()
					<----------------p
					<---------------n
				# bend
				refined = lang.tagMapper(header_content, True, line_num) # bend |+++++++++++++ CLOSE 
				# tag-----<<<
				new_line = re.sub( # tag-----<<< |+++++++++++++ OPEN 
					r"\s*" + re.escape(comment_marker) + r"\s*tag",
					" " + comment_marker + " " + refined,
					line,
					<----------------p
					<---------------n
				# tag
				) # tag |+++++++++++++ CLOSE 
				new_lines.append(new_line)
				expected = lang.closureMapping.get(refined, refined)
				stack.append(expected)
				continue
				<----------------p
			# bend
			# Process closing lines marked with generic "tag". # bend |+++++++++++++ CLOSE 
			# branch
			if stripped.startswith("}") and (comment_marker + " tag") in stripped: # branch |+++++++++++++ OPEN 
				base_line = re.sub(r"\s*" + re.escape(comment_marker) + r"\s*tag", "", line).rstrip()
				refined = lang.tagMapper(base_line, False, line_num)
				new_line = base_line + " " + comment_marker + " " + refined
				new_lines.append(new_line)
				continue
				<----------------p
			# bend
			<----------------p # bend |+++++++++++++ CLOSE 
		# bend
		# Lines without any generic marker pass through. # bend |+++++++++++++ CLOSE 
		new_lines.append(line)
		<----------------p
		<---------------n
	# lend
	return new_lines # lend |+++++++++++++ CLOSE 
# end
# end
# input
def main(): # input |+++++++++++++ BRIDGE 
	parser = argparse.ArgumentParser(description="VFCtagger: Pretty print and tag code with structure.")
	parser.add_argument("language", help="Language (e.g., javascript, python, perl)")
	parser.add_argument("file", help="Source file to tag")
	args = parser.parse_args()
	# Load language module.
	lang = None
	# branch
	try: # branch |+++++++++++++ OPEN 
		lang = load_language_module(args.language.lower())
		<----------------p
	# path
	except Exception as e: # path |+++++++++++++ BRIDGE 
		sys.exit("Error loading language module: " + str(e))
	# branch
	try: # branch |+++++++++++++ BRIDGE 
		# branch
		with open(args.file, "r", encoding="utf-8") as f: # branch |+++++++++++++ OPEN 
			source = f.read()
			<----------------p
		# bend
		<----------------p # bend |+++++++++++++ CLOSE 
	# path
	except Exception as e: # path |+++++++++++++ BRIDGE 
		sys.exit(f"Error reading source file: {e}")
	# bend
	# Use the language module's pretty_print() function to format the code. # bend |+++++++++++++ CLOSE 
	formatted = lang.pretty_print(source)
	# Convert any spaces to tabs.
	formatted = convert_spaces_to_tabs(formatted, spaces_per_tab=4)
	lines = formatted.splitlines()
	# Reset the language module's tag stack.
	lang.reset_tag_stack()
	# Phase 1: Reindent and mark block headers/closers.
	phase1_lines = phase1_reindent(lines, lang.comment_marker)
	# Phase 2: Discriminate and map tags using the language module's tagMapper().
	final_lines = phase2_map_tags(phase1_lines, lang.comment_marker, lang)
	output_file = os.path.basename(args.file) + ".txt"
	# branch
	try: # branch |+++++++++++++ OPEN 
		# branch
		with open(output_file, "w", encoding="utf-8") as out: # branch |+++++++++++++ OPEN 
			out.write(f"{lang.comment_marker} TAGGED FOR VFC\n")
			out.write(f"{lang.comment_marker} TAGGED FOR VFC\n")
			# loop
			for l in final_lines: # loop |+++++++++++++ OPEN 
				out.write(l + "\n")
				<----------------p
			# lend
			<----------------p # lend |+++++++++++++ CLOSE 
		# bend
		<----------------p # bend |+++++++++++++ CLOSE 
	# path
	except Exception as e: # path |+++++++++++++ BRIDGE 
		sys.exit(f"Error writing output file: {e}")
	# bend
	print(f"Output written to: {output_file}") # bend |+++++++++++++ CLOSE 
# bend
if __name__ == "__main__": # bend |+++++++++++++ CLOSE 
# tag-----<<<
#endif---------------- # tag-----<<< |+++++++++++++ OPEN 
	main()